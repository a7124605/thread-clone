This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
backend/
  .mvn/
    wrapper/
      maven-wrapper.properties
  src/
    main/
      java/
        com/
          threadclone/
            backend/
              BackendApplication.java
      resources/
        application.properties
    test/
      java/
        com/
          threadclone/
            backend/
              BackendApplicationTests.java
  .gitattributes
  .gitignore
  mvnw
  mvnw.cmd
  pom.xml
doc/
  initialReactTailwind.md
  projectStructure.md
  promptPlan.md
  spec.md
  todo.md
frontend/
  public/
    vite.svg
  src/
    assets/
      react.svg
    lib/
      supabase.js
    App.css
    App.jsx
    index.css
    main.jsx
  .env.example
  .gitignore
  .prettierignore
  .prettierrc
  eslint.config.js
  index.html
  package-lock 2.json
  package.json
  README.md
  vite.config.js
.gitattributes
.gitignore
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="backend/src/main/java/com/threadclone/backend/BackendApplication.java">
package com.threadclone.backend;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BackendApplication {

	public static void main(String[] args) {
		SpringApplication.run(BackendApplication.class, args);
	}

}
</file>

<file path="backend/src/test/java/com/threadclone/backend/BackendApplicationTests.java">
package com.threadclone.backend;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class BackendApplicationTests {

	@Test
	void contextLoads() {
	}

}
</file>

<file path="backend/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path="backend/src/main/resources/application.properties">
spring.application.name=backend
</file>

<file path="backend/.gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="backend/.gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="backend/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="backend/mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="backend/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.threadclone</groupId>
	<artifactId>backend</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>backend</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
</file>

<file path="doc/projectStructure.md">
```
threads-clone/
├── backend/                                    # Spring Boot 後端專案
│   ├── src/
│   │   ├── main/
│   │   │   ├── java/com/threadsclone/backend/
│   │   │   │   ├── controller/              # 控制器
│   │   │   │   │   ├── AdminController.java
│   │   │   │   │   ├── FollowController.java
│   │   │   │   │   ├── NotificationController.java
│   │   │   │   │   ├── PostController.java
│   │   │   │   │   └── UserController.java
│   │   │   │   ├── dto/                    # 資料傳輸對象
│   │   │   │   │   ├── NotificationResponse.java
│   │   │   │   │   ├── PostRequest.java
│   │   │   │   │   ├── PostResponse.java
│   │   │   │   │   ├── UserRequest.java
│   │   │   │   │   └── UserResponse.java
│   │   │   │   ├── entity/                 # 實體類
│   │   │   │   │   ├── Follow.java
│   │   │   │   │   ├── Notification.java
│   │   │   │   │   └── Post.java
│   │   │   │   ├── service/                # 服務邏輯
│   │   │   │   │   ├── AdminService.java
│   │   │   │   │   ├── FollowService.java
│   │   │   │   │   ├── NotificationService.java
│   │   │   │   │   ├── PostService.java
│   │   │   │   │   └── UserService.java
│   │   │   ├── resources/
│   │   │   │   └── application.properties  # Supabase 配置
│   │   ├── test/
│   │   │   ├── java/com/threadsclone/backend/controller/
│   │   │   │   ├── AdminControllerTest.java
│   │   │   │   ├── AdminIntegrationTest.java
│   │   │   │   ├── FollowControllerTest.java
│   │   │   │   ├── FollowIntegrationTest.java
│   │   │   │   ├── NotificationControllerTest.java
│   │   │   │   ├── NotificationIntegrationTest.java
│   │   │   │   ├── PostControllerTest.java
│   │   │   │   ├── PostIntegrationTest.java
│   │   │   │   ├── UserControllerTest.java
│   │   │   │   └── UserIntegrationTest.java
│   ├── pom.xml                             # Maven 依賴
│   └── database/
│       ├── database-schema.sql             # 資料庫結構（users, posts, replies, likes, follows）
│       └── notifications.sql              # 通知表和觸發器
├── frontend/                                  # React 前端專案
│   ├── src/
│   │   ├── components/
│   │   │   ├── Timeline.jsx               # 時間軸組件
│   │   │   └── Timeline.test.jsx          # 時間軸測試
│   │   ├── lib/
│   │   │   └── supabase.js                # Supabase 客戶端配置
│   │   ├── pages/
│   │   │   ├── AdminPanel.jsx             # 管理員面板
│   │   │   ├── AdminPanel.test.jsx
│   │   │   ├── Notifications.jsx          # 通知頁面
│   │   │   ├── Notifications.test.jsx
│   │   │   ├── Profile.jsx                # 個人資料頁面
│   │   │   ├── Profile.test.jsx
│   │   │   ├── Search.jsx                 # 搜索頁面
│   │   │   └── Search.test.jsx
│   │   ├── App.jsx                        # 路由配置
│   │   ├── index.jsx                      # 入口文件
│   │   └── index.css                      # 全局樣式（Tailwind CSS）
│   ├── public/
│   │   ├── index.html                     # HTML 模板
│   │   └── favicon.ico                    # 圖標
│   ├── package.json                       # Node.js 依賴
│   ├── tailwind.config.js                 # Tailwind CSS 配置
│   └── vite.config.js                     # Vite 配置
├── README.md                              # 專案說明
└── .gitignore                             # Git 忽略文件
```


```mermaid
graph TD
    A[用戶] -->|HTTP 請求| B[前端: React + Vite]
    B -->|渲染頁面| C[時間軸]
    B -->|渲染頁面| D[個人資料]
    B -->|渲染頁面| E[搜索]
    B -->|渲染頁面| F[通知]
    B -->|渲染頁面| G[管理員面板]

    B -->|API 呼叫| H[後端: Spring Boot]
    H -->|認證| I[Supabase 認證]
    H -->|資料操作| J[Supabase Postgrest]

    I -->|JWT 驗證| K[資料庫: PostgreSQL]
    J -->|SQL 查詢| K

    K --> L[users 表]
    K --> M[posts 表]
    K --> N[replies 表]
    K --> O[likes 表]
    K --> P[follows 表]
    K --> Q[notifications 表]

    subgraph 前端功能
        C -->|GET /api/timeline| H
        C -->|POST /api/posts/:post_id/replies| H
        C -->|POST/DELETE /api/posts/:post_id/like| H
        D -->|GET /api/users/:user_id| H
        D -->|PUT /api/users/me| H
        D -->|POST/DELETE /api/users/:user_id/follow| H
        E -->|GET /api/search| H
        F -->|GET /api/notifications| H
        G -->|GET /api/admin/posts| H
        G -->|DELETE /api/admin/posts/:post_id| H
    end

    subgraph 資料庫結構
        L -->|RLS: Users view/update own profile| K
        M -->|RLS: Users view public posts, Admins view all| K
        N -->|RLS: Users view public replies| K
        O -->|RLS: Users manage own likes| K
        P -->|RLS: Users manage own follows| K
        Q -->|RLS: Users view own notifications| K
        M -->|觸發器: handle_new_like| Q
        N -->|觸發器: handle_new_reply| Q
    end
```
</file>

<file path="doc/promptPlan.md">
以下是一個詳細的藍圖，用於以 **Traditional Chinese (Taiwan)** 打造 **Threads Clone** 社交媒體平台。我們將從專案規格出發，制定一個全面的開發計劃，將其分解為迭代的階段和細小的步驟，確保每個步驟可安全實施、易於測試，並逐步推進專案進展。最終，我們將提供一系列針對代碼生成 LLM 的提示（prompts），以測試驅動開發（TDD）方式實現每個步驟，遵循最佳實踐，確保增量進展，並將所有代碼整合為一個完整的應用程式。

---

## 專案藍圖：Threads Clone 開發計劃

### 目標
打造一個類似 Threads 的社交媒體平台，支援貼文、回覆、點讚、追蹤和搜尋功能，使用 Supabase（PostgreSQL）作為資料庫，後端使用 Spring Boot，前端使用 React，並採用 TDD 確保高品質代碼。

### 非功能需求
- **安全性**：使用 Supabase Auth 的 JWT 認證，啟用 RLS（Row-Level Security），確保資料安全。
- **可擴展性**：支援無限滾動、游標分頁和全文搜尋。
- **可維護性**：結構化代碼、OpenAPI 文件、詳細測試覆蓋（單元測試 80%，整合測試 50%）。
- **用戶體驗**：響應式設計，支援深色/淺色模式，簡潔的錯誤訊息。

### 技術棧
- **後端**：Spring Boot（RESTful API）、Supabase Java 客戶端、OpenAPI（Swagger）。
- **前端**：React（Vite）、Tailwind CSS、@supabase/supabase-js。
- **資料庫**：Supabase（PostgreSQL），啟用 RLS 和全文搜尋（tsvector）。
- **測試**：JUnit 5、Mockito、Spring Boot Test、Supabase CLI。

---

## 步驟一：整體開發計劃

### 階段分解
根據規格和開發順序，專案分為五個主要階段，每個階段聚焦於特定功能，並通過迭代逐步完成：

1. **階段 1：資料庫設計與認證基礎**（1-2 週）
    - 目標：建立資料庫結構，配置 Supabase Auth，實現註冊和登入功能。
    - 功能：資料庫表、索引、RLS、用戶註冊/登入 API、前端認證表單。
    - 交付：可運行的資料庫、基本的認證 API 和前端登入頁面。

2. **階段 2：貼文與時間軸**（2-3 週）
    - 目標：實現貼文創建、刪除和時間軸顯示。
    - 功能：貼文 API（創建、刪除）、時間軸 API（公開）、前端貼文表單和時間軸組件。
    - 交付：用戶可創建貼文並查看時間軸。

3. **階段 3：回覆與點讚**（2-3 週）
    - 目標：添加回覆和點讚功能。
    - 功能：回覆 API（創建、刪除）、點讚 API（點讚、取消）、前端回覆表單和點讚按鈕。
    - 交付：用戶可回覆貼文並點讚。

4. **階段 4：追蹤與個人檔案**（2-3 週）
    - 目標：實現追蹤系統和個人檔案頁面。
    - 功能：追蹤 API（追蹤、取消）、個人檔案 API、前端個人檔案頁面和追蹤按鈕。
    - 交付：用戶可追蹤他人並查看個人檔案。

5. **階段 5：搜尋與管理員功能**（2-3 週）
    - 目標：添加全文搜尋和管理員功能。
    - 功能：搜尋 API、管理員 API（查看匿名貼文）、前端搜尋欄和管理員介面。
    - 交付：完整的 Threads Clone 應用程式，包含搜尋和管理功能。

6. **階段 6：整合與優化**（1-2 週）
    - 目標：整合所有功能，優化性能，完成最終測試。
    - 功能：前端後端整合、性能優化（快取、索引）、最終測試。
    - 交付：可部署的應用程式，包含 CI/CD 設置和文件。

### 設計原則
- **增量開發**：每個階段交付可運行的功能，逐步增加複雜度。
- **TDD**：每個功能先寫測試，確保代碼品質。
- **模組化**：後端分層（控制器、服務、儲存庫），前端組件化（React 組件）。
- **整合性**：每個步驟的代碼與前一步驟整合，避免孤立代碼。
- **安全性**：所有 API 端點使用 Supabase JWT 驗證，資料庫使用 RLS。

---

## 步驟二：迭代分解

將每個階段分解為更小的迭代（chunks），每個迭代專注於一個具體功能，包含明確的輸入、輸出和測試需求。以下是初步分解：

### 階段 1：資料庫設計與認證基礎
- **迭代 1.1：資料庫結構與 RLS**
    - 創建表（`users`, `posts`, `replies`, `likes`, `follows`）、索引和觸發器。
    - 配置 RLS 政策，確保公開存取和認證存取。
    - 測試：Supabase CLI 驗證 RLS。
- **迭代 1.2：Supabase Auth 與觸發器**
    - 配置 Supabase Auth（啟用郵件驗證）。
    - 創建觸發器，同步 `auth.users` 到 `users` 表。
    - 測試：驗證用戶註冊和 `users` 表同步。
- **迭代 1.3：後端認證 API**
    - 實現 `POST /api/register` 和 `POST /api/login`。
    - 配置 Supabase Java 客戶端，處理 JWT。
    - 測試：單元測試（控制器、服務）、整合測試（API 與 Supabase）。
- **迭代 1.4：前端認證表單**
    - 創建 React 專案，設置 `@supabase/supabase-js`。
    - 實現註冊和登入表單，處理錯誤訊息。
    - 測試：手動測試表單，驗證 JWT 儲存。

### 階段 2：貼文與時間軸
- **迭代 2.1：貼文 API**
    - 實現 `POST /api/posts`（創建貼文）、`DELETE /api/posts/:post_id`。
    - 配置 RLS，確保只有驗證用戶可創建。
    - 測試：單元測試（貼文邏輯）、整合測試（RLS）。
- **迭代 2.2：時間軸 API**
    - 實現 `GET /api/timeline`（公開，無限滾動）。
    - 配置游標分頁（20 條/頁）。
    - 測試：單元測試（分頁邏輯）、整合測試（公開存取）。
- **迭代 2.3：前端貼文與時間軸**
    - 實現貼文表單和時間軸組件（無限滾動）。
    - 使用 Tailwind CSS 設計卡片式介面。
    - 測試：手動測試表單和滾動行為。

### 階段 3：回覆與點讚
- **迭代 3.1：回覆 API**
    - 實現 `POST /api/posts/:post_id/replies`、`DELETE /api/replies/:reply_id`。
    - 配置 RLS，確保驗證用戶可創建回覆。
    - 測試：單元測試（回覆邏輯）、整合測試（RLS）。
- **迭代 3.2：點讚 API**
    - 實現 `POST /api/posts/:post_id/like`、`DELETE /api/posts/:post_id/like`。
    - 更新 `posts.likes_count`。
    - 測試：單元測試（點讚邏輯）、整合測試（計數）。
- **迭代 3.3：前端回覆與點讚**
    - 實現回覆表單和點讚按鈕。
    - 顯示回覆列表和點讚數。
    - 測試：手動測試回覆和點讚功能。

### 階段 4：追蹤與個人檔案
- **迭代 4.1：追蹤 API**
    - 實現 `POST /api/follow/:user_id`、`DELETE /api/follow/:user_id`。
    - 配置 RLS，防止自我追蹤。
    - 測試：單元測試（追蹤邏輯）、整合測試（RLS）。
- **迭代 4.2：個人檔案 API**
    - 實現 `GET /api/users/:user_id`、`GET /api/users/:user_id/posts`。
    - 計算追蹤者數和追蹤中數。
    - 測試：單元測試（檔案邏輯）、整合測試（公開存取）。
- **迭代 4.3：前端個人檔案**
    - 實現個人檔案頁面和追蹤按鈕。
    - 顯示用戶貼文（無限滾動）。
    - 測試：手動測試檔案和追蹤功能。

### 階段 5：搜尋與管理員功能
- **迭代 5.1：搜尋 API**
    - 實現 `GET /api/search?q=關鍵字`，使用 `tsvector` 排序。
    - 配置公開存取（`is_deleted = FALSE`）。
    - 測試：單元測試（搜尋邏輯）、整合測試（相關性）。
- **迭代 5.2：管理員 API**
    - 實現 `GET /api/admin/posts?anonymous=true`。
    - 配置管理員 RLS。
    - 測試：單元測試（管理員邏輯）、整合測試（權限）。
- **迭代 5.3：前端搜尋與管理員**
    - 實現搜尋欄和管理員介面。
    - 顯示搜尋結果和匿名貼文。
    - 測試：手動測試搜尋和管理功能。

### 階段 6：整合與優化
- **迭代 6.1：前端後端整合**
    - 整合所有 API 端點和前端組件。
    - 確保 JWT 驗證和錯誤處理。
    - 測試：端到端測試（手動）。
- **迭代 6.2：性能優化**
    - 添加快取（Redis 或 Supabase Edge Functions）。
    - 優化索引（搜尋、分頁）。
    - 測試：性能測試（響應時間）。
- **迭代 6.3：最終測試與文件**
    - 執行全套測試（單元、整合、端到端）。
    - 生成 OpenAPI 文件和 README。
    - 測試：驗證覆蓋率（80% 單元，50% 整合）。

---

## 步驟三：細化步驟

每個迭代進一步分解為更小的步驟，確保每個步驟：
- **可實施**：單次開發不超過 1-2 小時。
- **可測試**：包含明確的測試案例。
- **有意義**：推進專案進展，與前一步驟整合。
- **安全**：避免大規模變更，減少錯誤風險。





以下是階段 1 和 2 的細化步驟（其他階段可依相同邏輯分解）：

### 階段 1：資料庫設計與認證基礎

#### 迭代 1.1：資料庫結構與 RLS
- **步驟 1.1.1：創建資料庫表**
    - 創建 `users`, `posts`, `replies`, `likes`, `follows` 表。
    - 配置主鍵、外鍵和約束。
    - 測試：驗證表結構（Supabase CLI）。
- **步驟 1.1.2：添加索引**
    - 創建全文搜尋索引（`content_tsv`）和其他索引。
    - 測試：查詢性能（EXPLAIN）。
- **步驟 1.1.3：實現觸發器**
    - 創建 `detect_english` 和 `update_content_tsv` 函數。
    - 添加觸發器到 `posts` 和 `replies`。
    - 測試：插入英文/非英文內容，驗證 `content_tsv`。
- **步驟 1.1.4：配置 RLS**
    - 啟用 RLS，添加政策（`users`, `posts`, `replies`, `likes`, `follows`）。
    - 測試：模擬 `anon` 和 `authenticated` 角色，驗證存取。

#### 迭代 1.2：Supabase Auth 與觸發器
- **步驟 1.2.1：配置 Supabase Auth**
    - 在 Supabase 儀表板啟用郵件驗證。
    - 設置環境變數（`SUPABASE_URL`, `SUPABASE_KEY`）。
    - 測試：手動註冊用戶，驗證郵件發送。
- **步驟 1.2.2：創建同步觸發器**
    - 實現 `handle_new_user` 函數，同步 `auth.users` 到 `users`。
    - 添加觸發器到 `auth.users`。
    - 測試：註冊用戶，驗證 `users` 表記錄。

#### 迭代 1.3：後端認證 API
- **步驟 1.3.1：設置 Spring Boot 專案**
    - 創建 Spring Boot 專案，添加依賴（`spring-web`, `spring-data-jpa`, `supabase-java`）。
    - 配置應用程式屬性（`application.yml`）。
    - 測試：啟動應用程式，驗證無錯誤。
- **步驟 1.3.2：實現註冊 API**
    - 創建 `POST /api/register` 控制器和服務。
    - 使用 Supabase Java 客戶端註冊用戶。
    - 測試：單元測試（控制器、服務）、整合測試（Supabase）。
- **步驟 1.3.3：實現登入 API**
    - 創建 `POST /api/login` 控制器和服務。
    - 處理 Supabase JWT 返回。
    - 測試：單元測試（控制器、服務）、整合測試（JWT）。

#### 迭代 1.4：前端認證表單
- **步驟 1.4.1：設置 React 專案**
    - 創建 Vite 專案，添加 Tailwind CSS 和 `@supabase/supabase-js`。
    - 配置環境變數（`.env`）。
    - 測試：啟動應用程式，驗證頁面渲染。
- **步驟 1.4.2：實現註冊表單**
    - 創建註冊組件，調用 `supabase.auth.signUp`。
    - 顯示錯誤訊息。
    - 測試：手動測試表單，驗證註冊流程。
- **步驟 1.4.3：實現登入表單**
    - 創建登入組件，調用 `supabase.auth.signInWithPassword`。
    - 儲存 JWT 到 `localStorage`。
    - 測試：手動測試登入，驗證 JWT。

### 階段 2：貼文與時間軸

#### 迭代 2.1：貼文 API
- **步驟 2.1.1：實現貼文創建 API**
    - 創建 `POST /api/posts` 控制器和服務。
    - 驗證內容長度（≤ 500 字）和圖片 URL。
    - 測試：單元測試（驗證邏輯）、整合測試（RLS）。
- **步驟 2.1.2：實現貼文刪除 API**
    - 創建 `DELETE /api/posts/:post_id` 控制器和服務。
    - 實現軟刪除（`is_deleted = TRUE`）。
    - 測試：單元測試（刪除邏輯）、整合測試（權限）。

#### 迭代 2.2：時間軸 API
- **步驟 2.2.1：實現時間軸查詢**
    - 創建 `GET /api/timeline` 控制器和服務。
    - 查詢用戶及其追蹤者的貼文（`is_deleted = FALSE`）。
    - 測試：單元測試（查詢邏輯）、整合測試（公開存取）。
- **步驟 2.2.2：實現游標分頁**
    - 添加 `cursor` 參數，限制每次 20 條。
    - 返回 `next_cursor`。
    - 測試：單元測試（分頁邏輯）、整合測試（連續滾動）。

#### 迭代 2.3：前端貼文與時間軸
- **步驟 2.3.1：實現貼文表單**
    - 創建貼文組件，調用 `POST /api/posts`。
    - 支援匿名選項和圖片 URL。
    - 測試：手動測試表單，驗證創建。
- **步驟 2.3.2：實現時間軸組件**
    - 創建時間軸組件，調用 `GET /api/timeline`。
    - 實現無限滾動（Intersection Observer）。
    - 測試：手動測試滾動和資料加載。

---

## 步驟四：審查與調整

### 審查標準
- **步驟粒度**：每個步驟應在 1-2 小時內完成，避免過於複雜。
- **測試性**：每個步驟包含明確的測試案例（單元、整合或手動）。
- **連續性**：每個步驟與前一步驟整合，無孤立代碼。
- **進展性**：每個步驟推進功能實現，逐步接近完整應用。

### 審查結果
- **階段 1.1（資料庫）**：步驟粒度適中，表、索引、觸發器和 RLS 分開實現，易於測試（Supabase CLI）。
- **階段 1.2（Auth）**：觸發器步驟可能稍複雜，可細分為「創建函數」和「綁定觸發器」。
- **階段 1.3（後端 API）**：註冊和登入 API 分開，粒度合理，測試覆蓋充分。
- **階段 1.4（前端）**：表單實現簡單，但需添加路由（React Router），可作為額外步驟。
- **階段 2（貼文與時間軸）**：步驟清晰，API 和前端分離，無限滾動可能需細分為「基礎列表」和「滾動邏輯」。

### 調整後的細化步驟（階段 1 示例）
#### 迭代 1.2：Supabase Auth 與觸發器
- **步驟 1.2.1：配置 Supabase Auth**
    - 配置郵件驗證，設置環境變數。
    - 測試：手動註冊，驗證郵件。
- **步驟 1.2.2：創建同步函數**
    - 實現 `handle_new_user` 函數。
    - 測試：模擬插入 `auth.users`，驗證函數邏輯。
- **步驟 1.2.3：綁定觸發器**
    - 添加觸發器到 `auth.users`。
    - 測試：註冊用戶，驗證 `users` 表記錄。

#### 迭代 1.4：前端認證表單
- **步驟 1.4.1：設置 React 專案**
    - 創建 Vite 專案，添加依賴。
    - 測試：啟動應用程式。
- **步驟 1.4.2：配置路由**
    - 添加 `react-router-dom`，設置 `/register` 和 `/login` 路由。
    - 測試：驗證路由導航。
- **步驟 1.4.3：實現註冊表單**
    - 創建註冊組件，調用 `supabase.auth.signUp`。
    - 測試：手動測試表單。
- **步驟 1.4.4：實現登入表單**
    - 創建登入組件，儲存 JWT。
    - 測試：手動測試登入。

---

## 步驟五：代碼生成提示（Prompts）

以下是針對階段 1 的代碼生成提示，採用 TDD 方式，確保每個步驟可獨立實現並與前一步驟整合。每個提示包含：
- **背景**：描述步驟目標和上下文。
- **任務**：明確的代碼要求。
- **測試要求**：單元測試、整合測試或手動測試。
- **整合方式**：如何與前一步驟連接。
- **格式**：使用 Markdown 和 `<xaiArtifact>` 標籤。

### Prompt 1：創建資料庫表
#### 背景
這是 Threads Clone 專案的第一步，目標是創建資料庫表（`users`, `posts`, `replies`, `likes`, `follows`），為後續功能奠定基礎。使用 Supabase（PostgreSQL），確保表結構符合規格。

#### 任務
創建 `database-schema.sql`，包含：
- `users` 表（無 `password_hash`，`id` 與 `auth.users.id` 同步）。
- `posts`, `replies`, `likes`, `follows` 表，包含主鍵、外鍵和約束。
- 啟用 UUID 擴展。

#### 測試要求
- 使用 Supabase CLI 執行腳本，驗證表結構。
- 插入測試資料，檢查約束（例如 `username` 長度、`image_url` 格式）。

#### 整合方式
- 這是第一步，無需整合。
- 後續步驟（索引、觸發器）將基於此腳本。

---

### Prompt 2：添加索引
#### 背景
在創建資料庫表後，需添加索引以優化查詢性能，特別是全文搜尋（`content_tsv`）和常見查詢（`user_id`, `post_id`）。

#### 任務
更新 `database-schema.sql`，添加以下索引：
- 全文搜尋索引（`idx_posts_content_tsv`, `idx_replies_content_tsv`）。
- 外鍵索引（`idx_posts_user_id`, `idx_replies_post_id` 等）。
- 刪除篩選索引（`idx_posts_is_deleted`, `idx_replies_is_deleted`）。

#### 測試要求
- 使用 `EXPLAIN` 驗證索引使用。
- 插入測試資料，比較有無索引的查詢性能。

#### 整合方式
- 追加到 `database-schema.sql`，基於 Prompt 1 的表結構。

---

### Prompt 3：實現觸發器
#### 背景
為支援全文搜尋，需為 `posts` 和 `replies` 表添加觸發器，自動生成 `content_tsv`（僅限英文內容）。

#### 任務
更新 `database-schema.sql`，添加：
- `detect_english` 函數，檢查是否為 ASCII 內容。
- `update_content_tsv` 函數，生成 `content_tsv`。
- 觸發器（`posts_tsv_trigger`, `replies_tsv_trigger`）。

#### 測試要求
- 插入英文內容，驗證 `content_tsv` 生成。
- 插入非英文內容（例如中文），驗證 `content_tsv` 為 NULL。

#### 整合方式
- 追加到 `database-schema.sql`，基於 Prompt 2。

---

### Prompt 4：配置 RLS
#### 背景
為確保資料安全，需為所有表啟用 RLS，並添加政策，支援公開存取（`anon`）、認證存取（`authenticated`）和管理員權限。

#### 任務
更新 `database-schema.sql`，添加：
- 啟用 RLS（`ALTER TABLE ... ENABLE ROW LEVEL SECURITY`）。
- RLS 政策（`users`, `posts`, `replies`, `likes`, `follows`），如規格所述。

#### 測試要求
- 使用 Supabase CLI 模擬角色：
  - `anon`：驗證僅能查看未刪除貼文/回覆。
  - `authenticated`：驗證可創建貼文（需 `is_verified`）。
  - `admin`：驗證可刪除任何貼文。

#### 整合方式
- 追加到 `database-schema.sql`，基於 Prompt 3。

```sql
-- Threads Clone 資料庫結構
-- 為 Supabase (PostgreSQL) 設計，包含表、索引、觸發器和 RLS
-- 使用 UUID，與 Supabase Auth 同步

-- 啟用 UUID 擴展
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- 語言偵測函數：檢查是否為英文（僅 ASCII 字符）
CREATE OR REPLACE FUNCTION detect_english(content TEXT) RETURNS BOOLEAN AS $$
BEGIN
  RETURN content ~ '^[[:ascii:]]*$';
END;
$$ LANGUAGE plpgsql;

-- 更新 content_tsv 的觸發器函數
CREATE OR REPLACE FUNCTION update_content_tsv() RETURNS TRIGGER AS $$
BEGIN
  IF detect_english(NEW.content) THEN
    NEW.content_tsv := to_tsvector('simple', NEW.content);
  ELSE
    NEW.content_tsv := NULL;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 創建 users 表
CREATE TABLE users (
  id UUID PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  username TEXT UNIQUE NOT NULL CHECK (LENGTH(username) >= 3 AND LENGTH(username) <= 50),
  bio TEXT CHECK (LENGTH(bio) <= 160),
  is_verified BOOLEAN DEFAULT FALSE,
  role TEXT DEFAULT 'user' CHECK (role IN ('user', 'admin')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 創建 posts 表
CREATE TABLE posts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  content TEXT NOT NULL CHECK (LENGTH(content) <= 500),
  content_tsv TSVECTOR,
  image_url TEXT CHECK (LENGTH(image_url) <= 255 AND image_url ~* '\.(jpg|png|gif)$'),
  user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  is_anonymous BOOLEAN DEFAULT FALSE,
  is_deleted BOOLEAN DEFAULT FALSE,
  likes_count INT DEFAULT 0 CHECK (likes_count >= 0),
  replies_count INT DEFAULT 0 CHECK (replies_count >= 0),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 創建 posts 表觸發器
CREATE TRIGGER posts_tsv_trigger
  BEFORE INSERT OR UPDATE OF content
  ON posts
  FOR EACH ROW
  EXECUTE FUNCTION update_content_tsv();

-- 創建 replies 表
CREATE TABLE replies (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
  content TEXT NOT NULL CHECK (LENGTH(content) <= 200),
  content_tsv TSVECTOR,
  image_url TEXT CHECK (LENGTH(image_url) <= 255 AND image_url ~* '\.(jpg|png|gif)$'),
  user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  is_anonymous BOOLEAN DEFAULT FALSE,
  is_deleted BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 創建 replies 表觸發器
CREATE TRIGGER replies_tsv_trigger
  BEFORE INSERT OR UPDATE OF content
  ON replies
  FOR EACH ROW
  EXECUTE FUNCTION update_content_tsv();

-- 創建 likes 表
CREATE TABLE likes (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  PRIMARY KEY (user_id, post_id)
);

-- 創建 follows 表
CREATE TABLE follows (
  follower_id UUID REFERENCES users(id) ON DELETE CASCADE,
  followed_id UUID REFERENCES users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  PRIMARY KEY (follower_id, followed_id)
);

-- 創建索引
CREATE INDEX idx_posts_content_tsv ON posts USING GIN(content_tsv) WHERE content_tsv IS NOT NULL;
CREATE INDEX idx_replies_content_tsv ON replies USING GIN(content_tsv) WHERE content_tsv IS NOT NULL;
CREATE INDEX idx_posts_user_id ON posts(user_id);
CREATE INDEX idx_posts_is_deleted ON posts(is_deleted);
CREATE INDEX idx_replies_post_id ON replies(post_id, created_at);
CREATE INDEX idx_replies_is_deleted ON replies(is_deleted);
CREATE INDEX idx_likes_post_id ON likes(post_id);
CREATE INDEX idx_follows_follower_id ON follows(follower_id);
CREATE INDEX idx_follows_followed_id ON follows(followed_id);

-- 啟用 RLS
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE replies ENABLE ROW LEVEL SECURITY;
ALTER TABLE likes ENABLE ROW LEVEL SECURITY;
ALTER TABLE follows ENABLE ROW LEVEL SECURITY;

-- users 表 RLS 政策
CREATE POLICY "Users view own profile" ON users
FOR SELECT TO authenticated
USING (id = auth.uid());

CREATE POLICY "Users update own profile" ON users
FOR UPDATE TO authenticated
USING (id = auth.uid())
WITH CHECK (
  LENGTH(username) >= 3 AND LENGTH(username) <= 50 AND
  LENGTH(bio) <= 160
);

CREATE POLICY "Admins view all users" ON users
FOR SELECT TO authenticated
USING ((SELECT role FROM users WHERE id = auth.uid()) = 'admin');

-- posts 表 RLS 政策
CREATE POLICY "Public view non-deleted posts" ON posts
FOR SELECT TO public
USING (is_deleted = FALSE);

CREATE POLICY "Users create posts" ON posts
FOR INSERT TO authenticated
WITH CHECK (
  auth.uid() IS NOT NULL AND
  (SELECT is_verified FROM users WHERE id = auth.uid()) = TRUE
);

CREATE POLICY "Users delete own posts" ON posts
FOR UPDATE TO authenticated
USING (user_id = auth.uid())
WITH CHECK (is_deleted IS NOT NULL);

CREATE POLICY "Admins delete all posts" ON posts
FOR UPDATE TO authenticated
USING ((SELECT role FROM users WHERE id = auth.uid()) = 'admin')
WITH CHECK (is_deleted IS NOT NULL);

CREATE POLICY "Admins view all posts" ON posts
FOR SELECT TO authenticated
USING ((SELECT role FROM users WHERE id = auth.uid()) = 'admin');

-- replies 表 RLS 政策
CREATE POLICY "Public view non-deleted replies" ON replies
FOR SELECT TO public
USING (is_deleted = FALSE);

CREATE POLICY "Users create replies" ON replies
FOR INSERT TO authenticated
WITH CHECK (
  auth.uid() IS NOT NULL AND
  (SELECT is_verified FROM users WHERE id = auth.uid()) = TRUE
);

CREATE POLICY "Users delete own replies" ON replies
FOR UPDATE TO authenticated
USING (user_id = auth.uid())
WITH CHECK (is_deleted IS NOT NULL);

CREATE POLICY "Admins delete all replies" ON replies
FOR UPDATE TO authenticated
USING ((SELECT role FROM users WHERE id = auth.uid()) = 'admin')
WITH CHECK (is_deleted IS NOT NULL);

CREATE POLICY "Admins view all replies" ON replies
FOR SELECT TO authenticated
USING ((SELECT role FROM users WHERE id = auth.uid()) = 'admin');

-- likes 表 RLS 政策
CREATE POLICY "Users manage own likes" ON likes
FOR ALL TO authenticated
USING (user_id = auth.uid());

-- follows 表 RLS 政策
CREATE POLICY "Users manage own follows" ON follows
FOR ALL TO authenticated
USING (follower_id = auth.uid())
WITH CHECK (follower_id != followed_id);
```


---

### Prompt 5：配置 Supabase Auth
#### 背景
在資料庫結構完成後，需配置 Supabase Auth 以支援用戶註冊和郵件驗證。

#### 任務
創建 `supabase-config.md`，記錄 Supabase Auth 配置：
- 啟用郵件驗證。
- 設置環境變數（`SUPABASE_URL`, `SUPABASE_KEY`）。
- 提供測試腳本（SQL），模擬註冊。

#### 測試要求
- 手動註冊用戶，驗證郵件發送。
- 執行測試腳本，檢查 `auth.users` 記錄。

#### 整合方式
- 獨立文件，供後續步驟參考。
- 環境變數用於後端和前端。

```
# Supabase Auth 配置

## 目標
配置 Supabase Auth，啟用郵件驗證，支援 Threads Clone 的用戶註冊和登入。

## 步驟
1. **啟用郵件驗證**：
   - 登入 Supabase 儀表板，進入「Authentication」設置。
   - 啟用「Email」提供者，設置驗證郵件模板（預設模板即可）。
   - 設置郵件有效期為 24 小時。
2. **設置環境變數**：
   - 在 Supabase 儀表板獲取專案 URL 和 Anon Key。
   - 創建 `.env` 文件：
     ```env
     SUPABASE_URL=https://<project>.supabase.co
     SUPABASE_KEY=<anon_key>
     ```
3. **測試腳本**：
   - 使用 Supabase CLI 或 SQL 客戶端執行以下腳本，模擬註冊：
     ```sql
     -- 模擬註冊
     INSERT INTO auth.users (email, password_hash, email_verified)
     VALUES ('test@example.com', 'hashed_password', FALSE);
     -- 檢查記錄
     SELECT * FROM auth.users WHERE email = 'test@example.com';
     ```

## 測試
- 手動註冊用戶（透過 Supabase API 或後續前端）。
- 驗證收到郵件，點擊連結後 `auth.users.email_verified` 為 TRUE。

```

---

### Prompt 6：創建同步觸發器
#### 背景
為同步 `auth.users` 和 `users` 表，需創建觸發器，當新用戶註冊時自動插入 `users` 表。

#### 任務
更新 `database-schema.sql`，添加：
- `handle_new_user` 函數，插入 `users` 表。
- 觸發器，綁定到 `auth.users` 的插入事件。

#### 測試要求
- 模擬插入 `auth.users`，驗證 `users` 表記錄。
- 檢查 `username`（預設值）、`is_verified` 等欄位。

#### 整合方式
- 追加到 `database-schema.sql`，基於 Prompt 4。

```sql

-- 使用 UUID，與 Supabase Auth 同步

-- 同步 auth.users 到 users 表
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.users (id, email, username, is_verified, role, created_at)
  VALUES (
    NEW.id,
    NEW.email,
    'user_' || NEW.id::text,
    NEW.email_verified,
    'user',
    NOW()
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
```

---

### Prompt 7：設置 Spring Boot 專案
#### 背景
開始後端開發，設置 Spring Boot 專案，準備實現認證 API。

#### 任務
創建 Spring Boot 專案，包含：
- `pom.xml`：添加依賴（`spring-web`, `spring-data-jpa`, `supabase-java`）。
- `application.yml`：配置 Supabase 連線。
- `Application.java`：主應用程式類。

#### 測試要求
- 執行 `mvn spring-boot:run`，驗證應用程式啟動。
- 檢查日誌，確保無錯誤。

#### 整合方式
- 獨立專案，為後續 API 提供基礎。
- 使用 Prompt 5 的環境變數。

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    <groupId>com.threadsclone</groupId>
    <artifactId>backend</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Threads Clone Backend</name>
    <description>Backend for Threads Clone social media platform</description>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.jan-supabase</groupId>
            <artifactId>supabase-java</artifactId>
            <version>0.2.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

```

```yaml
spring:
  application:
    name: threads-clone-backend
  datasource:
    url: ${SUPABASE_URL}/postgres
    username: postgres
    password: ${SUPABASE_KEY}
supabase:
  url: ${SUPABASE_URL}
  key: ${SUPABASE_KEY}
server:
  port: 8080
```

```java
package com.threadsclone.backend;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
```

---

### Prompt 8：實現註冊 API
#### 背景
在 Spring Boot 專案中實現 `POST /api/register`，使用 Supabase Auth 註冊用戶，並同步到 `users` 表。

#### 任務
創建以下文件：
- `AuthController.java`：處理 `POST /api/register`。
- `AuthService.java`：實現註冊邏輯。
- `AuthControllerTest.java`：單元測試。
- `AuthIntegrationTest.java`：整合測試。

#### 測試要求
- 單元測試：模擬 Supabase 客戶端，驗證註冊邏輯。
- 整合測試：連線 Supabase，驗證 API 和 `users` 表同步。

#### 整合方式
- 基於 Prompt 7 的 Spring Boot 專案。
- 使用 Prompt 5 的環境變數和 Prompt 6 的觸發器。

```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.RegisterRequest;
import com.threadsclone.backend.dto.RegisterResponse;
import com.threadsclone.backend.service.AuthService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api")
public class AuthController {
    private final AuthService authService;

    public AuthController(AuthService authService) {
        this.authService = authService;
    }

    @PostMapping("/register")
    public ResponseEntity<RegisterResponse> register(@RequestBody RegisterRequest request) {
        authService.register(request);
        return ResponseEntity.ok(new RegisterResponse("註冊成功，請驗證郵件"));
    }
}
```


```java
package com.threadsclone.backend.service;

import com.threadsclone.backend.dto.RegisterRequest;
import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.gotrue.Gotrue;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class AuthService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public AuthService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public void register(RegisterRequest request) {
        GoTrue auth = supabaseClient.getGoTrue();
        auth.signUp(request.getEmail(), request.getPassword());
        // 觸發器將自動同步到 users 表
    }
}
```



```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.RegisterRequest;
import com.threadsclone.backend.dto.RegisterResponse;
import com.threadsclone.backend.service.AuthService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.doNothing;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(AuthController.class)
public class AuthControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AuthService authService;

    @Test
    void shouldRegisterSuccessfully() throws Exception {
        RegisterRequest request = new RegisterRequest("test@example.com", "password123", "testuser");
        doNothing().when(authService).register(request);

        mockMvc.perform(post("/api/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"email\":\"test@example.com\",\"password\":\"password123\",\"username\":\"testuser\"}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("註冊成功，請驗證郵件"));
    }
}
```

```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.RegisterRequest;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class AuthIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldRegisterSuccessfully() {
        RegisterRequest request = new RegisterRequest("test@example.com", "password123", "testuser");
        ResponseEntity<String> response = restTemplate.postForEntity(
                "/api/register",
                request,
                String.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("{\"message\":\"註冊成功，請驗證郵件\"}", response.getBody());
    }
}
```


### 階段 2：貼文與時間軸
目標：實現貼文創建、刪除和時間軸顯示功能，包含後端 API 和前端組件，支援無限滾動。

#### 迭代 2.1：貼文 API

##### Prompt 9：實現貼文創建 API
###### 背景
在階段 1 完成資料庫和認證基礎後，需實現 `POST /api/posts` API，允許驗證用戶創建貼文，內容儲存到 `posts` 表，遵守 RLS（僅 `is_verified = TRUE` 的用戶可創建）。

###### 任務
創建以下文件：
- `PostController.java`：處理 `POST /api/posts`。
- `PostService.java`：實現貼文創建邏輯，使用 Supabase Java 客戶端。
- `Post.java`：貼文實體類（JPA）。
- `PostControllerTest.java`：單元測試。
- `PostIntegrationTest.java`：整合測試。

###### 測試要求
- **單元測試**：模擬 Supabase 客戶端，驗證內容長度（≤ 500 字）、圖片 URL 格式（jpg/png/gif）。
- **整合測試**：連線 Supabase，驗證貼文創建、RLS（未驗證用戶被阻止）、匿名選項。

###### 整合方式
- 基於 Prompt 7 的 Spring Boot 專案，添加 `PostController` 和 `PostService`。
- 使用 `database-schema.sql` 的 `posts` 表和 RLS。


```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import com.threadsclone.backend.service.PostService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api")
public class PostController {
    private final PostService postService;

    public PostController(PostService postService) {
        this.postService = postService;
    }

    @PostMapping("/posts")
    public ResponseEntity<PostResponse> createPost(@RequestBody PostRequest request) {
        PostResponse response = postService.createPost(request);
        return ResponseEntity.ok(response);
    }
}
```

```java
package com.threadsclone.backend.service;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PostService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public PostService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public PostResponse createPost(PostRequest request) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var result = postgrest.from("posts")
                .insert(new PostRequestWrapper(
                        request.getContent(),
                        request.getImageUrl(),
                        request.isAnonymous()
                ))
                .select()
                .single()
                .execute();
        return new PostResponse(
                result.getString("id"),
                result.getString("content"),
                result.getString("image_url"),
                result.getString("user_id"),
                result.getBoolean("is_anonymous"),
                result.getInt("likes_count"),
                result.getInt("replies_count"),
                result.getString("created_at")
        );
    }

    private static class PostRequestWrapper {
        private String content;
        private String image_url;
        private boolean is_anonymous;
        private String user_id;

        public PostRequestWrapper(String content, String imageUrl, boolean isAnonymous) {
            this.content = content;
            this.image_url = imageUrl;
            this.is_anonymous = isAnonymous;
            this.user_id = SupabaseClient.getAuth().getCurrentUser().getId();
        }
    }
}

```

```java
package com.threadsclone.backend.entity;

import jakarta.persistence.*;
import java.time.OffsetDateTime;
import java.util.UUID;

@Entity
@Table(name = "posts")
public class Post {
    @Id
    @GeneratedValue
    private UUID id;

    @Column(nullable = false, length = 500)
    private String content;

    @Column(name = "image_url", length = 255)
    private String imageUrl;

    @Column(name = "user_id")
    private UUID userId;

    @Column(name = "is_anonymous")
    private boolean isAnonymous;

    @Column(name = "is_deleted")
    private boolean isDeleted;

    @Column(name = "likes_count")
    private int likesCount;

    @Column(name = "replies_count")
    private int repliesCount;

    @Column(name = "created_at")
    private OffsetDateTime createdAt;

    // Getters and setters
}
```


```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import com.threadsclone.backend.service.PostService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(PostController.class)
public class PostControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private PostService postService;

    @Test
    void shouldCreatePostSuccessfully() throws Exception {
        PostRequest request = new PostRequest("Hello world", null, false);
        PostResponse response = new PostResponse("uuid", "Hello world", null, "user_id", false, 0, 0, "2025-05-10T12:00:00Z");
        when(postService.createPost(request)).thenReturn(response);

        mockMvc.perform(post("/api/posts")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"content\":\"Hello world\",\"imageUrl\":null,\"isAnonymous\":false}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content").value("Hello world"));
    }
}
```



```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class PostIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldCreatePostSuccessfully() {
        PostRequest request = new PostRequest("Hello world", null, false);
        ResponseEntity<PostResponse> response = restTemplate.postForEntity(
                "/api/posts",
                request,
                PostResponse.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("Hello world", response.getBody().getContent());
    }
}
```


##### Prompt 10：實現貼文刪除 API
###### 背景
實現 `DELETE /api/posts/:post_id` API，允許用戶軟刪除自己的貼文（設置 `is_deleted = TRUE`），遵守 RLS。

###### 任務
更新以下文件：
- `PostController.java`：添加 `DELETE /api/posts/:post_id`。
- `PostService.java`：實現刪除邏輯。
- `PostControllerTest.java`：添加單元測試。
- `PostIntegrationTest.java`：添加整合測試。

###### 測試要求
- **單元測試**：驗證僅貼文擁有者可刪除，模擬 RLS。
- **整合測試**：驗證軟刪除（`is_deleted = TRUE`），非擁有者和未驗證用戶被阻止。

###### 整合方式
- 擴展 Prompt 9 的 `PostController` 和 `PostService`。
- 依賴 `posts` 表的 RLS（`Users delete own posts`）。

```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import com.threadsclone.backend.service.PostService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class PostController {
    private final PostService postService;

    public PostController(PostService postService) {
        this.postService = postService;
    }

    @PostMapping("/posts")
    public ResponseEntity<PostResponse> createPost(@RequestBody PostRequest request) {
        PostResponse response = postService.createPost(request);
        return ResponseEntity.ok(response);
    }

    @DeleteMapping("/posts/{postId}")
    public ResponseEntity<Void> deletePost(@PathVariable String postId) {
        postService.deletePost(postId);
        return ResponseEntity.noContent().build();
    }
}
```


```java
package com.threadsclone.backend.service;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PostService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public PostService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public PostResponse createPost(PostRequest request) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var result = postgrest.from("posts")
                .insert(new PostRequestWrapper(
                        request.getContent(),
                        request.getImageUrl(),
                        request.isAnonymous()
                ))
                .select()
                .single()
                .execute();
        return new PostResponse(
                result.getString("id"),
                result.getString("content"),
                result.getString("image_url"),
                result.getString("user_id"),
                result.getBoolean("is_anonymous"),
                result.getInt("likes_count"),
                result.getInt("replies_count"),
                result.getString("created_at")
        );
    }

    public void deletePost(String postId) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        postgrest.from("posts")
                .update(new DeletePostWrapper())
                .eq("id", postId)
                .execute();
    }

    private static class PostRequestWrapper {
        private String content;
        private String image_url;
        private boolean is_anonymous;
        private String user_id;

        public PostRequestWrapper(String content, String imageUrl, boolean isAnonymous) {
            this.content = content;
            this.image_url = imageUrl;
            this.is_anonymous = isAnonymous;
            this.user_id = SupabaseClient.getAuth().getCurrentUser().getId();
        }
    }

    private static class DeletePostWrapper {
        private boolean is_deleted = true;
    }
}

```

```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import com.threadsclone.backend.service.PostService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(PostController.class)
public class PostControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private PostService postService;

    @Test
    void shouldCreatePostSuccessfully() throws Exception {
        PostRequest request = new PostRequest("Hello world", null, false);
        PostResponse response = new PostResponse("uuid", "Hello world", null, "user_id", false, 0, 0, "2025-05-10T12:00:00Z");
        when(postService.createPost(request)).thenReturn(response);

        mockMvc.perform(post("/api/posts")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"content\":\"Hello world\",\"imageUrl\":null,\"isAnonymous\":false}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content").value("Hello world"));
    }

    @Test
    void shouldDeletePostSuccessfully() throws Exception {
        String postId = "uuid";
        doNothing().when(postService).deletePost(postId);

        mockMvc.perform(delete("/api/posts/" + postId))
                .andExpect(status().isNoContent());
    }
}
```

```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class PostIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldCreatePostSuccessfully() {
        PostRequest request = new PostRequest("Hello world", null, false);
        ResponseEntity<PostResponse> response = restTemplate.postForEntity(
                "/api/posts",
                request,
                PostResponse.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("Hello world", response.getBody().getContent());
    }

    @Test
    void shouldDeletePostSuccessfully() {
        String postId = "uuid"; // 假設已創建的貼文 ID
        ResponseEntity<Void> response = restTemplate.exchange(
                "/api/posts/" + postId,
                HttpMethod.DELETE,
                null,
                Void.class
        );
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
    }
}
```

#### 迭代 2.2：時間軸 API

##### Prompt 11：實現時間軸查詢 API
###### 背景
實現 `GET /api/timeline` API，返回用戶及其追蹤者的貼文（`is_deleted = FALSE`），支援游標分頁（每次 20 條）。

###### 任務
更新以下文件：
- `PostController.java`：添加 `GET /api/timeline`。
- `PostService.java`：實現時間軸查詢邏輯。
- `PostControllerTest.java`：添加單元測試。
- `PostIntegrationTest.java`：添加整合測試。

###### 測試要求
- **單元測試**：驗證分頁邏輯（20 條/頁），模擬追蹤者貼文。
- **整合測試**：驗證返回未刪除貼文，檢查游標分頁。

###### 整合方式
- 擴展 Prompt 10 的 `PostController` 和 `PostService`。
- 依賴 `posts` 和 `follows` 表的 RLS。

```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import com.threadsclone.backend.service.PostService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class PostController {
    private final PostService postService;

    public PostController(PostService postService) {
        this.postService = postService;
    }

    @PostMapping("/posts")
    public ResponseEntity<PostResponse> createPost(@RequestBody PostRequest request) {
        PostResponse response = postService.createPost(request);
        return ResponseEntity.ok(response);
    }

    @DeleteMapping("/posts/{postId}")
    public ResponseEntity<Void> deletePost(@PathVariable String postId) {
        postService.deletePost(postId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/timeline")
    public ResponseEntity<List<PostResponse>> getTimeline(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String cursor
    ) {
        List<PostResponse> posts = postService.getTimeline(page, size, cursor);
        return ResponseEntity.ok(posts);
    }
}

```

```java
package com.threadsclone.backend.service;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class PostService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public PostService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public PostResponse createPost(PostRequest request) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var result = postgrest.from("posts")
                .insert(new PostRequestWrapper(
                        request.getContent(),
                        request.getImageUrl(),
                        request.isAnonymous()
                ))
                .select()
                .single()
                .execute();
        return new PostResponse(
                result.getString("id"),
                result.getString("content"),
                result.getString("image_url"),
                result.getString("user_id"),
                result.getBoolean("is_anonymous"),
                result.getInt("likes_count"),
                result.getInt("replies_count"),
                result.getString("created_at")
        );
    }

    public void deletePost(String postId) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        postgrest.from("posts")
                .update(new DeletePostWrapper())
                .eq("id", postId)
                .execute();
    }

    public List<PostResponse> getTimeline(int page, int size, String cursor) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var query = postgrest.from("posts")
                .select("*")
                .eq("is_deleted", false)
                .in("user_id", getFollowedUserIds())
                .order("created_at", "desc")
                .limit(size);
        if (cursor != null) {
            query.gt("created_at", cursor);
        }
        var results = query.execute();
        return results.getData().stream()
                .map(result -> new PostResponse(
                        result.getString("id"),
                        result.getString("content"),
                        result.getString("image_url"),
                        result.getString("user_id"),
                        result.getBoolean("is_anonymous"),
                        result.getInt("likes_count"),
                        result.getInt("replies_count"),
                        result.getString("created_at")
                ))
                .collect(Collectors.toList());
    }

    private List<String> getFollowedUserIds() {
        Postgrest postgrest = supabaseClient.getPostgrest();
        String currentUserId = SupabaseClient.getAuth().getCurrentUser().getId();
        var results = postgrest.from("follows")
                .select("followed_id")
                .eq("follower_id", currentUserId)
                .execute();
        return results.getData().stream()
                .map(result -> result.getString("followed_id"))
                .collect(Collectors.toList());
    }

    private static class PostRequestWrapper {
        private String content;
        private String image_url;
        private boolean is_anonymous;
        private String user_id;

        public PostRequestWrapper(String content, String imageUrl, boolean isAnonymous) {
            this.content = content;
            this.image_url = imageUrl;
            this.is_anonymous = isAnonymous;
            this.user_id = SupabaseClient.getAuth().getCurrentUser().getId();
        }
    }

    private static class DeletePostWrapper {
        private boolean is_deleted = true;
    }
}

```


```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import com.threadsclone.backend.service.PostService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(PostController.class)
public class PostControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private PostService postService;

    @Test
    void shouldCreatePostSuccessfully() throws Exception {
        PostRequest request = new PostRequest("Hello world", null, false);
        PostResponse response = new PostResponse("uuid", "Hello world", null, "user_id", false, 0, 0, "2025-05-10T12:00:00Z");
        when(postService.createPost(request)).thenReturn(response);

        mockMvc.perform(post("/api/posts")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"content\":\"Hello world\",\"imageUrl\":null,\"isAnonymous\":false}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content").value("Hello world"));
    }

    @Test
    void shouldDeletePostSuccessfully() throws Exception {
        String postId = "uuid";
        doNothing().when(postService).deletePost(postId);

        mockMvc.perform(delete("/api/posts/" + postId))
                .andExpect(status().isNoContent());
    }

    @Test
    void shouldGetTimelineSuccessfully() throws Exception {
        List<PostResponse> posts = List.of(
                new PostResponse("uuid1", "Post 1", null, "user_id", false, 0, 0, "2025-05-10T12:00:00Z")
        );
        when(postService.getTimeline(0, 20, null)).thenReturn(posts);

        mockMvc.perform(get("/api/timeline?page=0&size=20"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].content").value("Post 1"));
    }
}
```



```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class PostIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldCreatePostSuccessfully() {
        PostRequest request = new PostRequest("Hello world", null, false);
        ResponseEntity<PostResponse> response = restTemplate.postForEntity(
                "/api/posts",
                request,
                PostResponse.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("Hello world", response.getBody().getContent());
    }

    @Test
    void shouldDeletePostSuccessfully() {
        String postId = "uuid"; // 假設已創建的貼文 ID
        ResponseEntity<Void> response = restTemplate.exchange(
                "/api/posts/" + postId,
                HttpMethod.DELETE,
                null,
                Void.class
        );
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
    }

    @Test
    void shouldGetTimelineSuccessfully() {
        ResponseEntity<PostResponse[]> response = restTemplate.getForEntity(
                "/api/timeline?page=0&size=20",
                PostResponse[].class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }
}

```

#### 迭代 2.3：前端貼文與時間軸

##### Prompt 12：實現貼文表單
###### 背景
在前端實現貼文表單，調用 `POST /api/posts`，支援內容輸入、圖片 URL 和匿名選項，使用 Tailwind CSS 設計。

###### 任務
創建以下文件：
- `src/components/PostForm.jsx`：貼文表單組件。
- `src/components/PostForm.test.jsx`：單元測試。

###### 測試要求
- **單元測試**：驗證表單提交，模擬 API 呼叫，檢查錯誤處理（例如內容過長）。
- **手動測試**：驗證表單樣式和提交功能。

###### 整合方式
- 基於階段 1 的 React 專案（Prompt 8），添加新組件。
- 調用 `POST /api/posts`（Prompt 9）。

```jsx
import { useState } from 'react';
import { supabase } from '../lib/supabase';

export default function PostForm() {
  const [content, setContent] = useState('');
  const [imageUrl, setImageUrl] = useState('');
  const [isAnonymous, setIsAnonymous] = useState(false);
  const [error, setError] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch('/api/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${data.session.access_token}`,
        },
        body: JSON.stringify({ content, imageUrl, isAnonymous }),
      });
      if (!response.ok) throw new Error('創建貼文失敗');
      setContent('');
      setImageUrl('');
      setIsAnonymous(false);
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <textarea
        value={content}
        onChange={(e) => setContent(e.target.value)}
        placeholder="分享你的想法..."
        className="w-full p-2 mb-2 border rounded-md dark:bg-gray-700 dark:text-white"
        maxLength={500}
      />
      <input
        type="text"
        value={imageUrl}
        onChange={(e) => setImageUrl(e.target.value)}
        placeholder="圖片 URL（可選）"
        className="w-full p-2 mb-2 border rounded-md dark:bg-gray-700 dark:text-white"
      />
      <label className="flex items-center mb-2">
        <input
          type="checkbox"
          checked={isAnonymous}
          onChange={(e) => setIsAnonymous(e.target.checked)}
          className="mr-2"
        />
        匿名發布
      </label>
      {error && <p className="text-red-500">{error}</p>}
      <button
        type="submit"
        className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
      >
        發布
      </button>
    </form>
  );
}

```


```jsx
import { render, screen, fireEvent } from '@testing-library/react';
import PostForm from './PostForm';
import { supabase } from '../lib/supabase';

jest.mock('../lib/supabase', () => ({
  supabase: {
    auth: {
      getSession: jest.fn(),
    },
  },
}));

describe('PostForm', () => {
  beforeEach(() => {
    supabase.auth.getSession.mockResolvedValue({
      data: { session: { access_token: 'mock_token' } },
      error: null,
    });
    global.fetch = jest.fn(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve({}),
      })
    );
  });

  test('should submit post successfully', async () => {
    render(<PostForm />);
    fireEvent.change(screen.getByPlaceholderText('分享你的想法...'), {
      target: { value: 'Test post' },
    });
    fireEvent.click(screen.getByText('發布'));
    expect(global.fetch).toHaveBeenCalledWith(
      '/api/posts',
      expect.objectContaining({
        method: 'POST',
        headers: expect.any(Object),
        body: JSON.stringify({ content: 'Test post', imageUrl: '', isAnonymous: false }),
      })
    );
  });
});

```

##### Prompt 13：實現時間軸組件
###### 背景
實現時間軸組件，顯示 `GET /api/timeline` 返回的貼文，支援無限滾動，使用 Intersection Observer。

###### 任務
創建以下文件：
- `src/components/Timeline.jsx`：時間軸組件。
- `src/components/Timeline.test.jsx`：單元測試。

###### 測試要求
- **單元測試**：驗證貼文渲染，模擬無限滾動。
- **手動測試**：驗證滾動加載和卡片樣式。

###### 整合方式
- 基於 Prompt 12 的 React 專案，添加新組件。
- 調用 `GET /api/timeline`（Prompt 11）。


```jsx
import { useState, useEffect, useRef } from 'react';
import { supabase } from '../lib/supabase';

export default function Timeline() {
  const [posts, setPosts] = useState([]);
  const [page, setPage] = useState(0);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const observerRef = useRef();

  const loadPosts = async () => {
    if (loading || !hasMore) return;
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/timeline?page=${page}&size=20`, {
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (!response.ok) throw new Error('加載貼文失敗');
      const newPosts = await response.json();
      setPosts((prev) => [...prev, ...newPosts]);
      setPage(page + 1);
      setHasMore(newPosts.length === 20);
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadPosts();
  }, []);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && hasMore && !loading) {
          loadPosts();
        }
      },
      { threshold: 1.0 }
    );
    if (observerRef.current) observer.observe(observerRef.current);
    return () => observer.unobserve(observerRef.current);
  }, [hasMore, loading]);

  return (
    <div className="max-w-2xl mx-auto p-4">
      {posts.map((post) => (
        <div key={post.id} className="p-4 mb-4 bg-white dark:bg-gray-800 rounded-lg shadow-md">
          <p className="text-gray-800 dark:text-gray-200">{post.content}</p>
          {post.image_url && (
            <img src={post.image_url} alt="Post" className="mt-2 rounded-md max-w-full" />
          )}
          <p className="text-sm text-gray-500 dark:text-gray-400">
            {post.is_anonymous ? '匿名' : post.user_id} · {new Date(post.created_at).toLocaleString()}
          </p>
        </div>
      ))}
      <div ref={observerRef} className="h-10" />
      {loading && <p className="text-center">加載中...</p>}
    </div>
  );
}

```


```jsx
import { render, screen } from '@testing-library/react';
import Timeline from './Timeline';
import { supabase } from '../lib/supabase';

jest.mock('../lib/supabase', () => ({
  supabase: {
    auth: {
      getSession: jest.fn(),
    },
  },
}));

describe('Timeline', () => {
  beforeEach(() => {
    supabase.auth.getSession.mockResolvedValue({
      data: { session: { access_token: 'mock_token' } },
      error: null,
    });
    global.fetch = jest.fn(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve([
          { id: '1', content: 'Test post', user_id: 'user1', created_at: '2025-05-10T12:00:00Z' },
        ]),
      })
    );
  });

  test('should render posts', async () => {
    render(<Timeline />);
    expect(await screen.findByText('Test post')).toBeInTheDocument();
  });
});

```

### 階段 3：回覆與點讚
目標：實現回覆和點讚功能，包含 API 和前端交互。

#### 迭代 3.1：回覆 API

##### Prompt 14：實現回覆創建 API
###### 背景
實現 `POST /api/posts/:post_id/replies`，允許驗證用戶創建回覆，儲存到 `replies` 表，遵守 RLS。

###### 任務
創建以下文件：
- `ReplyController.java`：處理 `POST /api/posts/:post_id/replies`。
- `ReplyService.java`：實現回覆創建邏輯。
- `Reply.java`：回覆實體類。
- `ReplyControllerTest.java`：單元測試。
- `ReplyIntegrationTest.java`：整合測試。

###### 測試要求
- **單元測試**：驗證內容長度（≤ 200 字）、圖片 URL 格式。
- **整合測試**：驗證回覆創建、RLS（未驗證用戶被阻止）、`replies_count` 更新。

###### 整合方式
- 擴展 Prompt 11 的 Spring Boot 專案，添加新控制器和服務。
- 依賴 `replies` 表和 RLS。


```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.ReplyRequest;
import com.threadsclone.backend.dto.ReplyResponse;
import com.threadsclone.backend.service.ReplyService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/posts")
public class ReplyController {
    private final ReplyService replyService;

    public ReplyController(ReplyService replyService) {
        this.replyService = replyService;
    }

    @PostMapping("/{postId}/replies")
    public ResponseEntity<ReplyResponse> createReply(
            @PathVariable String postId,
            @RequestBody ReplyRequest request
    ) {
        ReplyResponse response = replyService.createReply(postId, request);
        return ResponseEntity.ok(response);
    }
}
```



```java
package com.threadsclone.backend.service;

import com.threadsclone.backend.dto.ReplyRequest;
import com.threadsclone.backend.dto.ReplyResponse;
import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ReplyService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public ReplyService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public ReplyResponse createReply(String postId, ReplyRequest request) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var result = postgrest.from("replies")
                .insert(new ReplyRequestWrapper(
                        postId,
                        request.getContent(),
                        request.getImageUrl(),
                        request.isAnonymous()
                ))
                .select()
                .single()
                .execute();
        // 更新 posts.replies_count
        postgrest.from("posts")
                .update(new UpdateRepliesCountWrapper())
                .eq("id", postId)
                .execute();
        return new ReplyResponse(
                result.getString("id"),
                result.getString("post_id"),
                result.getString("content"),
                result.getString("image_url"),
                result.getString("user_id"),
                result.getBoolean("is_anonymous"),
                result.getString("created_at")
        );
    }

    private static class ReplyRequestWrapper {
        private String post_id;
        private String content;
        private String image_url;
        private boolean is_anonymous;
        private String user_id;

        public ReplyRequestWrapper(String postId, String content, String imageUrl, boolean isAnonymous) {
            this.post_id = postId;
            this.content = content;
            this.image_url = imageUrl;
            this.is_anonymous = isAnonymous;
            this.user_id = SupabaseClient.getAuth().getCurrentUser().getId();
        }
    }

    private static class UpdateRepliesCountWrapper {
        private int replies_count;

        public UpdateRepliesCountWrapper() {
            this.replies_count = postgrest.from("replies")
                    .select("count")
                    .eq("post_id", post_id)
                    .execute()
                    .getData()
                    .getInt("count");
        }
    }
}
```



```java
package com.threadsclone.backend.entity;

import jakarta.persistence.*;
import java.time.OffsetDateTime;
import java.util.UUID;

@Entity
@Table(name = "replies")
public class Reply {
    @Id
    @GeneratedValue
    private UUID id;

    @Column(name = "post_id")
    private UUID postId;

    @Column(nullable = false, length = 200)
    private String content;

    @Column(name = "image_url", length = 255)
    private String imageUrl;

    @Column(name = "user_id")
    private UUID userId;

    @Column(name = "is_anonymous")
    private boolean isAnonymous;

    @Column(name = "is_deleted")
    private boolean isDeleted;

    @Column(name = "created_at")
    private OffsetDateTime createdAt;

    // Getters and setters
}
```


```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.ReplyRequest;
import com.threadsclone.backend.dto.ReplyResponse;
import com.threadsclone.backend.service.ReplyService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(ReplyController.class)
public class ReplyControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ReplyService replyService;

    @Test
    void shouldCreateReplySuccessfully() throws Exception {
        String postId = "post_uuid";
        ReplyRequest request = new ReplyRequest("Nice post!", null, false);
        ReplyResponse response = new ReplyResponse("uuid", postId, "Nice post!", null, "user_id", false, "2025-05-10T12:00:00Z");
        when(replyService.createReply(postId, request)).thenReturn(response);

        mockMvc.perform(post("/api/posts/" + postId + "/replies")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"content\":\"Nice post!\",\"imageUrl\":null,\"isAnonymous\":false}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content").value("Nice post!"));
    }
}

```

```java

package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.ReplyRequest;
import com.threadsclone.backend.dto.ReplyResponse;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class ReplyIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldCreateReplySuccessfully() {
        String postId = "post_uuid"; // 假設已創建的貼文 ID
        ReplyRequest request = new ReplyRequest("Nice post!", null, false);
        ResponseEntity<ReplyResponse> response = restTemplate.postForEntity(
                "/api/posts/" + postId + "/replies",
                request,
                ReplyResponse.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("Nice post!", response.getBody().getContent());
    }
}

```

##### Prompt 15：實現回覆刪除 API
###### 背景
實現 `DELETE /api/replies/:reply_id`，允許用戶軟刪除自己的回覆，更新 `posts.replies_count`。

###### 任務
更新以下文件：
- `ReplyController.java`：添加 `DELETE /api/replies/:reply_id`。
- `ReplyService.java`：實現刪除邏輯。
- `ReplyControllerTest.java`：添加單元測試。
- `ReplyIntegrationTest.java`：添加整合測試。

###### 測試要求
- **單元測試**：驗證僅回覆擁有者可刪除，模擬 RLS。
- **整合測試**：驗證軟刪除（`is_deleted = TRUE`），檢查 `replies_count`。

###### 整合方式
- 擴展 Prompt 14 的 `ReplyController` 和 `ReplyService`。
- 依賴 `replies` 和 `posts` 表的 RLS。

```java

package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.ReplyRequest;
import com.threadsclone.backend.dto.ReplyResponse;
import com.threadsclone.backend.service.ReplyService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class ReplyController {
    private final ReplyService replyService;

    public ReplyController(ReplyService replyService) {
        this.replyService = replyService;
    }

    @PostMapping("/posts/{postId}/replies")
    public ResponseEntity<ReplyResponse> createReply(
            @PathVariable String postId,
            @RequestBody ReplyRequest request
    ) {
        ReplyResponse response = replyService.createReply(postId, request);
        return ResponseEntity.ok(response);
    }

    @DeleteMapping("/replies/{replyId}")
    public ResponseEntity<Void> deleteReply(@PathVariable String replyId) {
        replyService.deleteReply(replyId);
        return ResponseEntity.noContent().build();
    }
}
```



```java
package com.threadsclone.backend.service;

import com.threadsclone.backend.dto.ReplyRequest;
import com.threadsclone.backend.dto.ReplyResponse;
import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ReplyService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public ReplyService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public ReplyResponse createReply(String postId, ReplyRequest request) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var result = postgrest.from("replies")
                .insert(new ReplyRequestWrapper(
                        postId,
                        request.getContent(),
                        request.getImageUrl(),
                        request.isAnonymous()
                ))
                .select()
                .single()
                .execute();
        // 更新 posts.replies_count
        postgrest.from("posts")
                .update(new UpdateRepliesCountWrapper(postId))
                .eq("id", postId)
                .execute();
        return new ReplyResponse(
                result.getString("id"),
                result.getString("post_id"),
                result.getString("content"),
                result.getString("image_url"),
                result.getString("user_id"),
                result.getBoolean("is_anonymous"),
                result.getString("created_at")
        );
    }

    public void deleteReply(String replyId) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var reply = postgrest.from("replies")
                .select("post_id")
                .eq("id", replyId)
                .single()
                .execute();
        String postId = reply.getString("post_id");
        postgrest.from("replies")
                .update(new DeleteReplyWrapper())
                .eq("id", replyId)
                .execute();
        // 更新 posts.replies_count
        postgrest.from("posts")
                .update(new UpdateRepliesCountWrapper(postId))
                .eq("id", postId)
                .execute();
    }

    private static class ReplyRequestWrapper {
        private String post_id;
        private String content;
        private String image_url;
        private boolean is_anonymous;
        private String user_id;

        public ReplyRequestWrapper(String postId, String content, String imageUrl, boolean isAnonymous) {
            this.post_id = postId;
            this.content = content;
            this.image_url = imageUrl;
            this.is_anonymous = isAnonymous;
            this.user_id = SupabaseClient.getAuth().getCurrentUser().getId();
        }
    }

    private static class DeleteReplyWrapper {
        private boolean is_deleted = true;
    }

    private static class UpdateRepliesCountWrapper {
        private int replies_count;

        public UpdateRepliesCountWrapper(String postId) {
            this.replies_count = postgrest.from("replies")
                    .select("count")
                    .eq("post_id", postId)
                    .eq("is_deleted", false)
                    .execute()
                    .getData()
                    .getInt("count");
        }
    }
}
```



```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.ReplyRequest;
import com.threadsclone.backend.dto.ReplyResponse;
import com.threadsclone.backend.service.ReplyService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(ReplyController.class)
public class ReplyControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ReplyService replyService;

    @Test
    void shouldCreateReplySuccessfully() throws Exception {
        String postId = "post_uuid";
        ReplyRequest request = new ReplyRequest("Nice post!", null, false);
        ReplyResponse response = new ReplyResponse("uuid", postId, "Nice post!", null, "user_id", false, "2025-05-10T12:00:00Z");
        when(replyService.createReply(postId, request)).thenReturn(response);

        mockMvc.perform(post("/api/posts/" + postId + "/replies")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"content\":\"Nice post!\",\"imageUrl\":null,\"isAnonymous\":false}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content").value("Nice post!"));
    }

    @Test
    void shouldDeleteReplySuccessfully() throws Exception {
        String replyId = "uuid";
        doNothing().when(replyService).deleteReply(replyId);

        mockMvc.perform(delete("/api/replies/" + replyId))
                .andExpect(status().isNoContent());
    }
}
```



```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.ReplyRequest;
import com.threadsclone.backend.dto.ReplyResponse;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class ReplyIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldCreateReplySuccessfully() {
        String postId = "post_uuid"; // 假設已創建的貼文 ID
        ReplyRequest request = new ReplyRequest("Nice post!", null, false);
        ResponseEntity<ReplyResponse> response = restTemplate.postForEntity(
                "/api/posts/" + postId + "/replies",
                request,
                ReplyResponse.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("Nice post!", response.getBody().getContent());
    }

    @Test
    void shouldDeleteReplySuccessfully() {
        String replyId = "uuid"; // 假設已創建的回覆 ID
        ResponseEntity<Void> response = restTemplate.exchange(
                "/api/replies/" + replyId,
                HttpMethod.DELETE,
                null,
                Void.class
        );
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
    }
}
```


#### 迭代 3.2：點讚 API

##### Prompt 16：實現點讚 API
###### 背景
實現 `POST /api/posts/:post_id/like` 和 `DELETE /api/posts/:post_id/like`，管理用戶點讚，更新 `posts.likes_count`。

###### 任務
創建以下文件：
- `LikeController.java`：處理點讚 API。
- `LikeService.java`：實現點讚邏輯。
- `Like.java`：點讚實體類。
- `LikeControllerTest.java`：單元測試。
- `LikeIntegrationTest.java`：整合測試。

###### 測試要求
- **單元測試**：驗證點讚/取消邏輯，模擬 RLS。
- **整合測試**：驗證 `likes` 表記錄和 `posts.likes_count` 更新。

###### 整合方式
- 擴展 Prompt 15 的 Spring Boot 專案，添加新控制器和服務。
- 依賴 `likes` 和 `posts` 表的 RLS。


```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.service.LikeService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/posts")
public class LikeController {
    private final LikeService likeService;

    public LikeController(LikeService likeService) {
        this.likeService = likeService;
    }

    @PostMapping("/{postId}/like")
    public ResponseEntity<Void> likePost(@PathVariable String postId) {
        likeService.likePost(postId);
        return ResponseEntity.ok().build();
    }

    @DeleteMapping("/{postId}/like")
    public ResponseEntity<Void> unlikePost(@PathVariable String postId) {
        likeService.unlikePost(postId);
        return ResponseEntity.ok().build();
    }
}

```


```java
package com.threadsclone.backend.service;

import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class LikeService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public LikeService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public void likePost(String postId) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        postgrest.from("likes")
                .insert(new LikeRequestWrapper(postId))
                .execute();
        // 更新 posts.likes_count
        postgrest.from("posts")
                .update(new UpdateLikesCountWrapper(postId))
                .eq("id", postId)
                .execute();
    }

    public void unlikePost(String postId) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        String userId = SupabaseClient.getAuth().getCurrentUser().getId();
        postgrest.from("likes")
                .delete()
                .eq("post_id", postId)
                .eq("user_id", userId)
                .execute();
        // 更新 posts.likes_count
        postgrest.from("posts")
                .update(new UpdateLikesCountWrapper(postId))
                .eq("id", postId)
                .execute();
    }

    private static class LikeRequestWrapper {
        private String post_id;
        private String user_id;

        public LikeRequestWrapper(String postId) {
            this.post_id = postId;
            this.user_id = SupabaseClient.getAuth().getCurrentUser().getId();
        }
    }

    private static class UpdateLikesCountWrapper {
        private int likes_count;

        public UpdateLikesCountWrapper(String postId) {
            this.likes_count = postgrest.from("likes")
                    .select("count")
                    .eq("post_id", postId)
                    .execute()
                    .getData()
                    .getInt("count");
        }
    }
}
```



```java
package com.threadsclone.backend.entity;

import jakarta.persistence.*;
import java.time.OffsetDateTime;
import java.util.UUID;

@Entity
@Table(name = "likes")
public class Like {
    @Id
    @Column(name = "user_id")
    private UUID userId;

    @Id
    @Column(name = "post_id")
    private UUID postId;

    @Column(name = "created_at")
    private OffsetDateTime createdAt;

    // Getters and setters
}

```


```java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.service.LikeService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.doNothing;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(LikeController.class)
public class LikeControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private LikeService likeService;

    @Test
    void shouldLikePostSuccessfully() throws Exception {
        String postId = "uuid";
        doNothing().when(likeService).likePost(postId);

        mockMvc.perform(post("/api/posts/" + postId + "/like"))
                .andExpect(status().isOk());
    }

    @Test
    void shouldUnlikePostSuccessfully() throws Exception {
        String postId = "uuid";
        doNothing().when(likeService).unlikePost(postId);

        mockMvc.perform(delete("/api/posts/" + postId + "/like"))
                .andExpect(status().isOk());
    }
}
```


```java
```java
package com.threadsclone.backend.controller;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class LikeIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldLikePostSuccessfully() {
        String postId = "uuid"; // 假設已創建的貼文 ID
        ResponseEntity<Void> response = restTemplate.postForEntity(
                "/api/posts/" + postId + "/like",
                null,
                Void.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    void shouldUnlikePostSuccessfully() {
        String postId = "uuid"; // 假設已點讚的貼文 ID
        ResponseEntity<Void> response = restTemplate.exchange(
                "/api/posts/" + postId + "/like",
                HttpMethod.DELETE,
                null,
                Void.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }
}
```


#### 迭代 3.3：前端回覆與點讚

感謝您的要求！以下將從 **Prompt 17：實現回覆表單和點讚按鈕** 開始，繼續提供 Threads Clone 社交媒體平台的藍圖，涵蓋剩餘部分的代碼生成提示（Prompt 17 及後續），直到完成所有階段（階段 3 至階段 6）。所有代碼將使用標準 Markdown 格式（```）包裝，不使用 `<xaiArtifact>` 標籤。回應將使用 **繁體中文（台灣）**，遵循您指定的結構化、詳細且非冗餘的風格，並基於已更新的 `database-schema.sql`（包含 `handle_new_user` 函數和修正後的 RLS 政策）。每個提示將包含背景、任務、測試要求和整合方式，確保與前述步驟整合，並遵循 **TDD（測試驅動開發）** 方法。

---

## 步驟五：代碼生成提示（續）

### 階段 3：回覆與點讚（續）

#### 迭代 3.3：前端回覆與點讚

##### Prompt 17：實現回覆表單和點讚按鈕
###### 背景
在前端實現回覆表單（調用 `POST /api/posts/:post_id/replies`）和點讚按鈕（調用 `POST/DELETE /api/posts/:post_id/like`），顯示回覆列表和點讚數。該功能增強時間軸組件，提供用戶與貼文的交互。

###### 任務
更新以下文件：
- `src/components/Timeline.jsx`：添加回覆表單、回覆列表和點讚按鈕。
- `src/components/Timeline.test.jsx`：添加單元測試。

###### 測試要求
- **單元測試**：驗證回覆提交和點讚交互，模擬 API 呼叫，檢查錯誤處理（例如內容過長、未登入）。
- **手動測試**：驗證回覆列表渲染、點讚數更新和樣式（使用 Tailwind CSS）。

###### 整合方式
- 基於階段 2 的 `Timeline.jsx`（Prompt 13），擴展功能。
- 調用 `POST /api/posts/:post_id/replies`（Prompt 14）、`POST/DELETE /api/posts/:post_id/like`（Prompt 16）。
- 依賴 `posts`、`replies` 和 `likes` 表的 RLS。

```jsx
// src/components/Timeline.jsx
import { useState, useEffect, useRef } from 'react';
import { supabase } from '../lib/supabase';

export default function Timeline() {
  const [posts, setPosts] = useState([]);
  const [page, setPage] = useState(0);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const observerRef = useRef();

  const loadPosts = async () => {
    if (loading || !hasMore) return;
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/timeline?page=${page}&size=20`, {
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (!response.ok) throw new Error('加載貼文失敗');
      const newPosts = await response.json();
      setPosts((prev) => [...prev, ...newPosts]);
      setPage(page + 1);
      setHasMore(newPosts.length === 20);
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleReply = async (postId, content, isAnonymous) => {
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/posts/${postId}/replies`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${data.session.access_token}`,
        },
        body: JSON.stringify({ content, imageUrl: null, isAnonymous }),
      });
      if (!response.ok) throw new Error('回覆失敗');
      loadPosts(); // 重新加載貼文
    } catch (err) {
      console.error(err);
    }
  };

  const handleLike = async (postId, isLiked) => {
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/posts/${postId}/like`, {
        method: isLiked ? 'DELETE' : 'POST',
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (!response.ok) throw new Error('點讚失敗');
      loadPosts(); // 重新加載貼文
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    loadPosts();
  }, []);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && hasMore && !loading) {
          loadPosts();
        }
      },
      { threshold: 1.0 }
    );
    if (observerRef.current) observer.observe(observerRef.current);
    return () => observer.unobserve(observerRef.current);
  }, [hasMore, loading]);

  return (
    <div className="max-w-2xl mx-auto p-4">
      {posts.map((post) => (
        <div key={post.id} className="p-4 mb-4 bg-white dark:bg-gray-800 rounded-lg shadow-md">
          <p className="text-gray-800 dark:text-gray-200">{post.content}</p>
          {post.image_url && (
            <img src={post.image_url} alt="Post" className="mt-2 rounded-md max-w-full" />
          )}
          <p className="text-sm text-gray-500 dark:text-gray-400">
            {post.is_anonymous ? '匿名' : post.user_id} · {new Date(post.created_at).toLocaleString()}
          </p>
          <div className="flex items-center mt-2">
            <button
              onClick={() => handleLike(post.id, post.is_liked)}
              className={`mr-4 ${post.is_liked ? 'text-red-500' : 'text-gray-500'}`}
            >
              {post.is_liked ? '取消讚' : '讚'} ({post.likes_count})
            </button>
            <span>{post.replies_count} 回覆</span>
          </div>
          <div className="mt-2">
            {post.replies?.map((reply) => (
              <div key={reply.id} className="pl-4 border-l-2 border-gray-300 dark:border-gray-600">
                <p className="text-gray-800 dark:text-gray-200">{reply.content}</p>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {reply.is_anonymous ? '匿名' : reply.user_id} · {new Date(reply.created_at).toLocaleString()}
                </p>
              </div>
            ))}
            <form
              onSubmit={(e) => {
                e.preventDefault();
                const content = e.target.content.value;
                const isAnonymous = e.target.isAnonymous.checked;
                handleReply(post.id, content, isAnonymous);
                e.target.reset();
              }}
              className="mt-2"
            >
              <textarea
                name="content"
                placeholder="回覆..."
                className="w-full p-2 border rounded-md dark:bg-gray-700 dark:text-white"
                maxLength={200}
              />
              <label className="flex items-center mb-2">
                <input type="checkbox" name="isAnonymous" className="mr-2" />
                匿名回覆
              </label>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
              >
                回覆
              </button>
            </form>
          </div>
        </div>
      ))}
      <div ref={observerRef} className="h-10" />
      {loading && <p className="text-center">加載中...</p>}
    </div>
  );
}
```

```jsx
// src/components/Timeline.test.jsx
import { render, screen, fireEvent } from '@testing-library/react';
import Timeline from './Timeline';
import { supabase } from '../lib/supabase';

jest.mock('../lib/supabase', () => ({
  supabase: {
    auth: {
      getSession: jest.fn(),
    },
  },
}));

describe('Timeline', () => {
  beforeEach(() => {
    supabase.auth.getSession.mockResolvedValue({
      data: { session: { access_token: 'mock_token' } },
      error: null,
    });
    global.fetch = jest.fn();
  });

  test('should render posts', async () => {
    global.fetch.mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve([
        { id: '1', content: 'Test post', user_id: 'user1', created_at: '2025-05-10T12:00:00Z', likes_count: 0, replies_count: 0, is_liked: false },
      ]),
    });
    render(<Timeline />);
    expect(await screen.findByText('Test post')).toBeInTheDocument();
  });

  test('should submit reply', async () => {
    global.fetch
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve([
          { id: '1', content: 'Test post', user_id: 'user1', created_at: '2025-05-10T12:00:00Z', likes_count: 0, replies_count: 0, is_liked: false },
        ]),
      })
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({}),
      });
    render(<Timeline />);
    const textarea = await screen.findByPlaceholderText('回覆...');
    fireEvent.change(textarea, { target: { value: 'Test reply' } });
    fireEvent.click(screen.getByText('回覆'));
    expect(global.fetch).toHaveBeenCalledWith(
      '/api/posts/1/replies',
      expect.objectContaining({
        method: 'POST',
        headers: expect.any(Object),
        body: JSON.stringify({ content: 'Test reply', imageUrl: null, isAnonymous: false }),
      })
    );
  });

  test('should toggle like', async () => {
    global.fetch
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve([
          { id: '1', content: 'Test post', user_id: 'user1', created_at: '2025-05-10T12:00:00Z', likes_count: 0, replies_count: 0, is_liked: false },
        ]),
      })
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({}),
      });
    render(<Timeline />);
    const likeButton = await screen.findByText('讚 (0)');
    fireEvent.click(likeButton);
    expect(global.fetch).toHaveBeenCalledWith(
      '/api/posts/1/like',
      expect.objectContaining({
        method: 'POST',
        headers: expect.any(Object),
      })
    );
  });
});
```

### 階段 4：用戶追蹤與個人資料
目標：實現用戶追蹤功能和個人資料頁面，包含 API 和前端組件。

#### 迭代 4.1：追蹤 API

##### Prompt 18：實現追蹤 API
###### 背景
實現 `POST /api/users/:user_id/follow` 和 `DELETE /api/users/:user_id/follow`，管理用戶追蹤關係，儲存到 `follows` 表，遵守 RLS。

###### 任務
創建以下文件：
- `FollowController.java`：處理追蹤 API。
- `FollowService.java`：實現追蹤邏輯。
- `Follow.java`：追蹤實體類。
- `FollowControllerTest.java`：單元測試。
- `FollowIntegrationTest.java`：整合測試。

###### 測試要求
- **單元測試**：驗證追蹤/取消邏輯，模擬 RLS。
- **整合測試**：驗證 `follows` 表記錄，檢查重複追蹤錯誤。

###### 整合方式
- 擴展階段 3 的 Spring Boot 專案，添加新控制器和服務。
- 依賴 `follows` 表的 RLS（`Users manage own follows`）。

```java
// src/main/java/com/threadsclone/backend/controller/FollowController.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.service.FollowService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/users")
public class FollowController {
    private final FollowService followService;

    public FollowController(FollowService followService) {
        this.followService = followService;
    }

    @PostMapping("/{userId}/follow")
    public ResponseEntity<Void> followUser(@PathVariable String userId) {
        followService.followUser(userId);
        return ResponseEntity.ok().build();
    }

    @DeleteMapping("/{userId}/follow")
    public ResponseEntity<Void> unfollowUser(@PathVariable String userId) {
        followService.unfollowUser(userId);
        return ResponseEntity.ok().build();
    }
}
```

```java
// src/main/java/com/threadsclone/backend/service/FollowService.java
package com.threadsclone.backend.service;

import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class FollowService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public FollowService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public void followUser(String userId) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        postgrest.from("follows")
                .insert(new FollowRequestWrapper(userId))
                .execute();
    }

    public void unfollowUser(String userId) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        String currentUserId = SupabaseClient.getAuth().getCurrentUser().getId();
        postgrest.from("follows")
                .delete()
                .eq("follower_id", currentUserId)
                .eq("followed_id", userId)
                .execute();
    }

    private static class FollowRequestWrapper {
        private String follower_id;
        private String followed_id;

        public FollowRequestWrapper(String followedId) {
            this.follower_id = SupabaseClient.getAuth().getCurrentUser().getId();
            this.followed_id = followedId;
        }
    }
}
```

```java
// src/main/java/com/threadsclone/backend/entity/Follow.java
package com.threadsclone.backend.entity;

import jakarta.persistence.*;
import java.time.OffsetDateTime;
import java.util.UUID;

@Entity
@Table(name = "follows")
public class Follow {
    @Id
    @Column(name = "follower_id")
    private UUID followerId;

    @Id
    @Column(name = "followed_id")
    private UUID followedId;

    @Column(name = "created_at")
    private OffsetDateTime createdAt;

    // Getters and setters
}
```

```java
// src/test/java/com/threadsclone/backend/controller/FollowControllerTest.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.service.FollowService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.doNothing;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(FollowController.class)
public class FollowControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private FollowService followService;

    @Test
    void shouldFollowUserSuccessfully() throws Exception {
        String userId = "uuid";
        doNothing().when(followService).followUser(userId);

        mockMvc.perform(post("/api/users/" + userId + "/follow"))
                .andExpect(status().isOk());
    }

    @Test
    void shouldUnfollowUserSuccessfully() throws Exception {
        String userId = "uuid";
        doNothing().when(followService).unfollowUser(userId);

        mockMvc.perform(delete("/api/users/" + userId + "/follow"))
                .andExpect(status().isOk());
    }
}
```

```java
// src/test/java/com/threadsclone/backend/controller/FollowIntegrationTest.java
package com.threadsclone.backend.controller;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class FollowIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldFollowUserSuccessfully() {
        String userId = "uuid"; // 假設存在的用戶 ID
        ResponseEntity<Void> response = restTemplate.postForEntity(
                "/api/users/" + userId + "/follow",
                null,
                Void.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    void shouldUnfollowUserSuccessfully() {
        String userId = "uuid"; // 假設已追蹤的用戶 ID
        ResponseEntity<Void> response = restTemplate.exchange(
                "/api/users/" + userId + "/follow",
                HttpMethod.DELETE,
                null,
                Void.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }
}
```

#### 迭代 4.2：個人資料 API

##### Prompt 19：實現個人資料 API
###### 背景
實現 `GET /api/users/:user_id` 和 `PUT /api/users/me`，分別用於查看用戶資料和更新個人資料（`username` 和 `bio`），遵守 RLS。

###### 任務
創建以下文件：
- `UserController.java`：處理用戶資料 API。
- `UserService.java`：實現用戶資料邏輯。
- `UserControllerTest.java`：單元測試。
- `UserIntegrationTest.java`：整合測試。

###### 測試要求
- **單元測試**：驗證資料檢索和更新，檢查 `username`（3-50 字）、`bio`（≤ 160 字）約束。
- **整合測試**：驗證 RLS（僅能查看自己或管理員查看所有），檢查更新後資料。

###### 整合方式
- 擴展 Prompt 18 的 Spring Boot 專案，添加新控制器和服務。
- 依賴 `users` 表的 RLS（`Users view own profile`, `Users update own profile`）。

```java
// src/main/java/com/threadsclone/backend/controller/UserController.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.UserRequest;
import com.threadsclone.backend.dto.UserResponse;
import com.threadsclone.backend.service.UserService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/users")
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/{userId}")
    public ResponseEntity<UserResponse> getUser(@PathVariable String userId) {
        UserResponse response = userService.getUser(userId);
        return ResponseEntity.ok(response);
    }

    @PutMapping("/me")
    public ResponseEntity<UserResponse> updateUser(@RequestBody UserRequest request) {
        UserResponse response = userService.updateUser(request);
        return ResponseEntity.ok(response);
    }
}
```

```java
// src/main/java/com/threadsclone/backend/service/UserService.java
package com.threadsclone.backend.service;

import com.threadsclone.backend.dto.UserRequest;
import com.threadsclone.backend.dto.UserResponse;
import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public UserService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public UserResponse getUser(String userId) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var result = postgrest.from("users")
                .select("*")
                .eq("id", userId)
                .single()
                .execute();
        return new UserResponse(
                result.getString("id"),
                result.getString("email"),
                result.getString("username"),
                result.getString("bio"),
                result.getBoolean("is_verified"),
                result.getString("role"),
                result.getString("created_at")
        );
    }

    public UserResponse updateUser(UserRequest request) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        String userId = SupabaseClient.getAuth().getCurrentUser().getId();
        var result = postgrest.from("users")
                .update(new UserRequestWrapper(request.getUsername(), request.getBio()))
                .eq("id", userId)
                .select()
                .single()
                .execute();
        return new UserResponse(
                result.getString("id"),
                result.getString("email"),
                result.getString("username"),
                result.getString("bio"),
                result.getBoolean("is_verified"),
                result.getString("role"),
                result.getString("created_at")
        );
    }

    private static class UserRequestWrapper {
        private String username;
        private String bio;

        public UserRequestWrapper(String username, String bio) {
            this.username = username;
            this.bio = bio;
        }
    }
}
```

```java
// src/test/java/com/threadsclone/backend/controller/UserControllerTest.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.UserRequest;
import com.threadsclone.backend.dto.UserResponse;
import com.threadsclone.backend.service.UserService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(UserController.class)
public class UserControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private UserService userService;

    @Test
    void shouldGetUserSuccessfully() throws Exception {
        String userId = "uuid";
        UserResponse response = new UserResponse(userId, "test@example.com", "testuser", "Bio", true, "user", "2025-05-10T12:00:00Z");
        when(userService.getUser(userId)).thenReturn(response);

        mockMvc.perform(get("/api/users/" + userId))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.username").value("testuser"));
    }

    @Test
    void shouldUpdateUserSuccessfully() throws Exception {
        UserRequest request = new UserRequest("newuser", "New bio");
        UserResponse response = new UserResponse("uuid", "test@example.com", "newuser", "New bio", true, "user", "2025-05-10T12:00:00Z");
        when(userService.updateUser(request)).thenReturn(response);

        mockMvc.perform(put("/api/users/me")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"username\":\"newuser\",\"bio\":\"New bio\"}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.username").value("newuser"));
    }
}
```

```java
// src/test/java/com/threadsclone/backend/controller/UserIntegrationTest.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.UserRequest;
import com.threadsclone.backend.dto.UserResponse;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class UserIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldGetUserSuccessfully() {
        String userId = "uuid"; // 假設存在的用戶 ID
        ResponseEntity<UserResponse> response = restTemplate.getForEntity(
                "/api/users/" + userId,
                UserResponse.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }

    @Test
    void shouldUpdateUserSuccessfully() {
        UserRequest request = new UserRequest("newuser", "New bio");
        ResponseEntity<UserResponse> response = restTemplate.exchange(
                "/api/users/me",
                HttpMethod.PUT,
                new HttpEntity<>(request),
                UserResponse.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("newuser", response.getBody().getUsername());
    }
}
```

#### 迭代 4.3：前端個人資料

##### Prompt 20：實現個人資料頁面
###### 背景
實現個人資料頁面，顯示用戶資料（`GET /api/users/:user_id`）、貼文和追蹤狀態，允許編輯個人資料（`PUT /api/users/me`）和追蹤操作（`POST/DELETE /api/users/:user_id/follow`）。

###### 任務
創建以下文件：
- `src/pages/Profile.jsx`：個人資料頁面組件。
- `src/pages/Profile.test.jsx`：單元測試。

###### 測試要求
- **單元測試**：驗證資料渲染、編輯表單提交、追蹤按鈕交互，模擬 API 呼叫。
- **手動測試**：驗證頁面樣式和交互（使用 Tailwind CSS）。

###### 整合方式
- 基於階段 3 的 React 專案，添加新頁面。
- 調用 `GET /api/users/:user_id`、`PUT /api/users/me`（Prompt 19）、`POST/DELETE /api/users/:user_id/follow`（Prompt 18）。

```jsx
// src/pages/Profile.jsx
import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { supabase } from '../lib/supabase';

export default function Profile() {
  const { userId } = useParams();
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [isFollowing, setIsFollowing] = useState(false);
  const [editing, setEditing] = useState(false);
  const [username, setUsername] = useState('');
  const [bio, setBio] = useState('');
  const [error, setError] = useState(null);

  const loadUser = async () => {
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/users/${userId}`, {
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (!response.ok) throw new Error('加載用戶失敗');
      const userData = await response.json();
      setUser(userData);
      setUsername(userData.username);
      setBio(userData.bio || '');
    } catch (err) {
      setError(err.message);
    }
  };

  const loadPosts = async () => {
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/users/${userId}/posts`, {
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (!response.ok) throw new Error('加載貼文失敗');
      setPosts(await response.json());
    } catch (err) {
      console.error(err);
    }
  };

  const checkFollowing = async () => {
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) return;
      const response = await fetch(`/api/users/${userId}/follow-status`, {
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (response.ok) setIsFollowing(await response.json().isFollowing);
    } catch (err) {
      console.error(err);
    }
  };

  const handleFollow = async () => {
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/users/${userId}/follow`, {
        method: isFollowing ? 'DELETE' : 'POST',
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (!response.ok) throw new Error('追蹤操作失敗');
      setIsFollowing(!isFollowing);
    } catch (err) {
      setError(err.message);
    }
  };

  const handleUpdate = async (e) => {
    e.preventDefault();
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch('/api/users/me', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${data.session.access_token}`,
        },
        body: JSON.stringify({ username, bio }),
      });
      if (!response.ok) throw new Error('更新失敗');
      setUser((prev) => ({ ...prev, username, bio }));
      setEditing(false);
    } catch (err) {
      setError(err.message);
    }
  };

  useEffect(() => {
    loadUser();
    loadPosts();
    checkFollowing();
  }, [userId]);

  if (!user) return <p>加載中...</p>;

  return (
    <div className="max-w-2xl mx-auto p-4">
      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md">
        <h2 className="text-xl font-bold">{user.username}</h2>
        <p className="text-gray-600 dark:text-gray-400">{user.bio || '無簡介'}</p>
        <p className="text-sm text-gray-500 dark:text-gray-400">加入時間: {new Date(user.created_at).toLocaleDateString()}</p>
        {user.id === supabase.auth.getCurrentUser()?.id ? (
          <button
            onClick={() => setEditing(!editing)}
            className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
          >
            {editing ? '取消' : '編輯資料'}
          </button>
        ) : (
          <button
            onClick={handleFollow}
            className={`mt-2 px-4 py-2 ${isFollowing ? 'bg-gray-500' : 'bg-blue-500'} text-white rounded-md hover:bg-opacity-80`}
          >
            {isFollowing ? '取消追蹤' : '追蹤'}
          </button>
        )}
        {editing && (
          <form onSubmit={handleUpdate} className="mt-4">
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              placeholder="用戶名"
              className="w-full p-2 mb-2 border rounded-md dark:bg-gray-700 dark:text-white"
              maxLength={50}
            />
            <textarea
              value={bio}
              onChange={(e) => setBio(e.target.value)}
              placeholder="簡介"
              className="w-full p-2 mb-2 border rounded-md dark:bg-gray-700 dark:text-white"
              maxLength={160}
            />
            {error && <p className="text-red-500">{error}</p>}
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
            >
              保存
            </button>
          </form>
        )}
      </div>
      <div className="mt-4">
        {posts.map((post) => (
          <div key={post.id} className="p-4 mb-4 bg-white dark:bg-gray-800 rounded-lg shadow-md">
            <p className="text-gray-800 dark:text-gray-200">{post.content}</p>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              {new Date(post.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}
```

```jsx
// src/pages/Profile.test.jsx
import { render, screen, fireEvent } from '@testing-library/react';
import { MemoryRouter, Route } from 'react-router-dom';
import Profile from './Profile';
import { supabase } from '../lib/supabase';

jest.mock('../lib/supabase', () => ({
  supabase: {
    auth: {
      getSession: jest.fn(),
      getCurrentUser: jest.fn(),
    },
  },
}));

describe('Profile', () => {
  beforeEach(() => {
    supabase.auth.getSession.mockResolvedValue({
      data: { session: { access_token: 'mock_token' } },
      error: null,
    });
    supabase.auth.getCurrentUser.mockReturnValue({ id: 'uuid' });
    global.fetch = jest.fn();
  });

  test('should render user profile', async () => {
    global.fetch.mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve({
        id: 'uuid',
        username: 'testuser',
        bio: 'Test bio',
        created_at: '2025-05-10T12:00:00Z',
      }),
    }).mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve([]),
    }).mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve({ isFollowing: false }),
    });
    render(
      <MemoryRouter initialEntries={['/profile/uuid']}>
        <Route path="/profile/:userId" component={Profile} />
      </MemoryRouter>
    );
    expect(await screen.findByText('testuser')).toBeInTheDocument();
    expect(screen.getByText('Test bio')).toBeInTheDocument();
  });

  test('should update profile', async () => {
    global.fetch
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({
          id: 'uuid',
          username: 'testuser',
          bio: 'Test bio',
          created_at: '2025-05-10T12:00:00Z',
        }),
      })
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve([]),
      })
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ isFollowing: false }),
      })
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ username: 'newuser', bio: 'New bio' }),
      });
    render(
      <MemoryRouter initialEntries={['/profile/uuid']}>
        <Route path="/profile/:userId" component={Profile} />
      </MemoryRouter>
    );
    fireEvent.click(await screen.findByText('編輯資料'));
    fireEvent.change(screen.getByPlaceholderText('用戶名'), { target: { value: 'newuser' } });
    fireEvent.change(screen.getByPlaceholderText('簡介'), { target: { value: 'New bio' } });
    fireEvent.click(screen.getByText('保存'));
    expect(global.fetch).toHaveBeenCalledWith(
      '/api/users/me',
      expect.objectContaining({
        method: 'PUT',
        headers: expect.any(Object),
        body: JSON.stringify({ username: 'newuser', bio: 'New bio' }),
      })
    );
  });
});
```

### 階段 5：搜索與通知
目標：實現貼文搜索功能和簡單通知系統。

#### 迭代 5.1：搜索 API

##### Prompt 21：實現貼文搜索 API
###### 背景
實現 `GET /api/search`，使用 `posts.content_tsv` 進行全文搜索（僅英文），返回未刪除的貼文，支援分頁。

###### 任務
更新以下文件：
- `PostController.java`：添加 `GET /api/search`。
- `PostService.java`：實現搜索邏輯。
- `PostControllerTest.java`：添加單元測試。
- `PostIntegrationTest.java`：添加整合測試。

###### 測試要求
- **單元測試**：驗證搜索關鍵字匹配，模擬 `to_tsvector` 查詢。
- **整合測試**：驗證僅返回未刪除貼文，檢查分頁。

###### 整合方式
- 擴展 Prompt 16 的 `PostController` 和 `PostService`。
- 依賴 `posts` 表的 `content_tsv` 欄位和 RLS。

```java
// src/main/java/com/threadsclone/backend/controller/PostController.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import com.threadsclone.backend.service.PostService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class PostController {
    private final PostService postService;

    public PostController(PostService postService) {
        this.postService = postService;
    }

    @PostMapping("/posts")
    public ResponseEntity<PostResponse> createPost(@RequestBody PostRequest request) {
        PostResponse response = postService.createPost(request);
        return ResponseEntity.ok(response);
    }

    @DeleteMapping("/posts/{postId}")
    public ResponseEntity<Void> deletePost(@PathVariable String postId) {
        postService.deletePost(postId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/timeline")
    public ResponseEntity<List<PostResponse>> getTimeline(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String cursor
    ) {
        List<PostResponse> posts = postService.getTimeline(page, size, cursor);
        return ResponseEntity.ok(posts);
    }

    @GetMapping("/search")
    public ResponseEntity<List<PostResponse>> searchPosts(
            @RequestParam String query,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size
    ) {
        List<PostResponse> posts = postService.searchPosts(query, page, size);
        return ResponseEntity.ok(posts);
    }
}
```

```java
// src/main/java/com/threadsclone/backend/service/PostService.java
package com.threadsclone.backend.service;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class PostService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public PostService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public PostResponse createPost(PostRequest request) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var result = postgrest.from("posts")
                .insert(new PostRequestWrapper(
                        request.getContent(),
                        request.getImageUrl(),
                        request.isAnonymous()
                ))
                .select()
                .single()
                .execute();
        return new PostResponse(
                result.getString("id"),
                result.getString("content"),
                result.getString("image_url"),
                result.getString("user_id"),
                result.getBoolean("is_anonymous"),
                result.getInt("likes_count"),
                result.getInt("replies_count"),
                result.getString("created_at")
        );
    }

    public void deletePost(String postId) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        postgrest.from("posts")
                .update(new DeletePostWrapper())
                .eq("id", postId)
                .execute();
    }

    public List<PostResponse> getTimeline(int page, int size, String cursor) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var query = postgrest.from("posts")
                .select("*")
                .eq("is_deleted", false)
                .in("user_id", getFollowedUserIds())
                .order("created_at", "desc")
                .limit(size);
        if (cursor != null) {
            query.gt("created_at", cursor);
        }
        var results = query.execute();
        return results.getData().stream()
                .map(result -> new PostResponse(
                        result.getString("id"),
                        result.getString("content"),
                        result.getString("image_url"),
                        result.getString("user_id"),
                        result.getBoolean("is_anonymous"),
                        result.getInt("likes_count"),
                        result.getInt("replies_count"),
                        result.getString("created_at")
                ))
                .collect(Collectors.toList());
    }

    public List<PostResponse> searchPosts(String query, int page, int size) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var results = postgrest.from("posts")
                .select("*")
                .eq("is_deleted", false)
                .textSearch("content_tsv", query, "simple")
                .order("created_at", "desc")
                .limit(size)
                .offset(page * size)
                .execute();
        return results.getData().stream()
                .map(result -> new PostResponse(
                        result.getString("id"),
                        result.getString("content"),
                        result.getString("image_url"),
                        result.getString("user_id"),
                        result.getBoolean("is_anonymous"),
                        result.getInt("likes_count"),
                        result.getInt("replies_count"),
                        result.getString("created_at")
                ))
                .collect(Collectors.toList());
    }

    private List<String> getFollowedUserIds() {
        Postgrest postgrest = supabaseClient.getPostgrest();
        String currentUserId = SupabaseClient.getAuth().getCurrentUser().getId();
        var results = postgrest.from("follows")
                .select("followed_id")
                .eq("follower_id", currentUserId)
                .execute();
        return results.getData().stream()
                .map(result -> result.getString("followed_id"))
                .collect(Collectors.toList());
    }

    private static class PostRequestWrapper {
        private String content;
        private String image_url;
        private boolean is_anonymous;
        private String user_id;

        public PostRequestWrapper(String content, String imageUrl, boolean isAnonymous) {
            this.content = content;
            this.image_url = imageUrl;
            this.is_anonymous = isAnonymous;
            this.user_id = SupabaseClient.getAuth().getCurrentUser().getId();
        }
    }

    private static class DeletePostWrapper {
        private boolean is_deleted = true;
    }
}
```

```java
// src/test/java/com/threadsclone/backend/controller/PostControllerTest.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import com.threadsclone.backend.service.PostService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(PostController.class)
public class PostControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private PostService postService;

    @Test
    void shouldCreatePostSuccessfully() throws Exception {
        PostRequest request = new PostRequest("Hello world", null, false);
        PostResponse response = new PostResponse("uuid", "Hello world", null, "user_id", false, 0, 0, "2025-05-10T12:00:00Z");
        when(postService.createPost(request)).thenReturn(response);

        mockMvc.perform(post("/api/posts")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"content\":\"Hello world\",\"imageUrl\":null,\"isAnonymous\":false}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content").value("Hello world"));
    }

    @Test
    void shouldDeletePostSuccessfully() throws Exception {
        String postId = "uuid";
        doNothing().when(postService).deletePost(postId);

        mockMvc.perform(delete("/api/posts/" + postId))
                .andExpect(status().isNoContent());
    }

    @Test
    void shouldGetTimelineSuccessfully() throws Exception {
        List<PostResponse> posts = List.of(
                new PostResponse("uuid1", "Post 1", null, "user_id", false, 0, 0, "2025-05-10T12:00:00Z")
        );
        when(postService.getTimeline(0, 20, null)).thenReturn(posts);

        mockMvc.perform(get("/api/timeline?page=0&size=20"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].content").value("Post 1"));
    }

    @Test
    void shouldSearchPostsSuccessfully() throws Exception {
        List<PostResponse> posts = List.of(
                new PostResponse("uuid1", "Hello world", null, "user_id", false, 0, 0, "2025-05-10T12:00:00Z")
        );
        when(postService.searchPosts("hello", 0, 20)).thenReturn(posts);

        mockMvc.perform(get("/api/search?query=hello&page=0&size=20"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].content").value("Hello world"));
    }
}
```

```java
// src/test/java/com/threadsclone/backend/controller/PostIntegrationTest.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostRequest;
import com.threadsclone.backend.dto.PostResponse;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class PostIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldCreatePostSuccessfully() {
        PostRequest request = new PostRequest("Hello world", null, false);
        ResponseEntity<PostResponse> response = restTemplate.postForEntity(
                "/api/posts",
                request,
                PostResponse.class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("Hello world", response.getBody().getContent());
    }

    @Test
    void shouldDeletePostSuccessfully() {
        String postId = "uuid"; // 假設已創建的貼文 ID
        ResponseEntity<Void> response = restTemplate.exchange(
                "/api/posts/" + postId,
                HttpMethod.DELETE,
                null,
                Void.class
        );
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
    }

    @Test
    void shouldGetTimelineSuccessfully() {
        ResponseEntity<PostResponse[]> response = restTemplate.getForEntity(
                "/api/timeline?page=0&size=20",
                PostResponse[].class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }

    @Test
    void shouldSearchPostsSuccessfully() {
        ResponseEntity<PostResponse[]> response = restTemplate.getForEntity(
                "/api/search?query=hello&page=0&size=20",
                PostResponse[].class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }
}
```

#### 迭代 5.2：前端搜索

##### Prompt 22：實現搜索頁面
###### 背景
實現搜索頁面，調用 `GET /api/search`，顯示匹配的貼文，支援關鍵字輸入和分頁。

###### 任務
創建以下文件：
- `src/pages/Search.jsx`：搜索頁面組件。
- `src/pages/Search.test.jsx`：單元測試。

###### 測試要求
- **單元測試**：驗證搜索結果渲染，模擬 API 呼叫。
- **手動測試**：驗證搜索輸入和貼文卡片樣式。

###### 整合方式
- 基於階段 4 的 React 專案，添加新頁面。
- 調用 `GET /api/search`（Prompt 21）。

```jsx
// src/pages/Search.jsx
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function Search() {
  const [query, setQuery] = useState('');
  const [posts, setPosts] = useState([]);
  const [page, setPage] = useState(0);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);

  const searchPosts = async () => {
    if (loading || !hasMore || !query) return;
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/search?query=${encodeURIComponent(query)}&page=${page}&size=20`, {
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (!response.ok) throw new Error('搜索失敗');
      const newPosts = await response.json();
      setPosts((prev) => [...prev, ...newPosts]);
      setPage(page + 1);
      setHasMore(newPosts.length === 20);
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    setPosts([]);
    setPage(0);
    setHasMore(true);
    searchPosts();
  };

  useEffect(() => {
    if (query) searchPosts();
  }, [page]);

  return (
    <div className="max-w-2xl mx-auto p-4">
      <form onSubmit={handleSearch} className="mb-4">
        <input
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="搜索貼文..."
          className="w-full p-2 border rounded-md dark:bg-gray-700 dark:text-white"
        />
        <button
          type="submit"
          className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
        >
          搜索
        </button>
      </form>
      <div>
        {posts.map((post) => (
          <div key={post.id} className="p-4 mb-4 bg-white dark:bg-gray-800 rounded-lg shadow-md">
            <p className="text-gray-800 dark:text-gray-200">{post.content}</p>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              {post.is_anonymous ? '匿名' : post.user_id} · {new Date(post.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
      {loading && <p className="text-center">加載中...</p>}
    </div>
  );
}
```

```jsx
// src/pages/Search.test.jsx
import { render, screen, fireEvent } from '@testing-library/react';
import Search from './Search';
import { supabase } from '../lib/supabase';

jest.mock('../lib/supabase', () => ({
  supabase: {
    auth: {
      getSession: jest.fn(),
    },
  },
}));

describe('Search', () => {
  beforeEach(() => {
    supabase.auth.getSession.mockResolvedValue({
      data: { session: { access_token: 'mock_token' } },
      error: null,
    });
    global.fetch = jest.fn();
  });

  test('should render search results', async () => {
    global.fetch.mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve([
        { id: '1', content: 'Hello world', user_id: 'user1', created_at: '2025-05-10T12:00:00Z' },
      ]),
    });
    render(<Search />);
    fireEvent.change(screen.getByPlaceholderText('搜索貼文...'), { target: { value: 'hello' } });
    fireEvent.click(screen.getByText('搜索'));
    expect(await screen.findByText('Hello world')).toBeInTheDocument();
  });
});
```

#### 迭代 5.3：通知系統

##### Prompt 23：實現通知 API
###### 背景
實現簡單通知系統，記錄點讚和回覆事件，儲存到新創建的 `notifications` 表，提供 `GET /api/notifications` 返回用戶通知。

###### 任務
創建以下文件：
- `notifications.sql`：創建 `notifications` 表和觸發器。
- `NotificationController.java`：處理 `GET /api/notifications`。
- `NotificationService.java`：實現通知邏輯。
- `Notification.java`：通知實體類。
- `NotificationControllerTest.java`：單元測試。
- `NotificationIntegrationTest.java`：整合測試。

###### 測試要求
- **單元測試**：驗證通知查詢，模擬分頁。
- **整合測試**：驗證點讚和回覆觸發通知，檢查 RLS。

###### 整合方式
- 擴展 Prompt 21 的 Spring Boot 專案，添加新表和服務。
- 更新 `database-schema.sql`，添加 `notifications` 表。

```sql
// database/notifications.sql
-- 創建 notifications 表
CREATE TABLE notifications (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  actor_id UUID REFERENCES users(id) ON DELETE SET NULL,
  type TEXT CHECK (type IN ('like', 'reply')),
  post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
  reply_id UUID REFERENCES replies(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 啟用 RLS
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

-- RLS 政策
CREATE POLICY "Users view own notifications" ON notifications
FOR SELECT TO authenticated
USING (user_id = auth.uid());

-- 創建索引
CREATE INDEX idx_notifications_user_id ON notifications(user_id, created_at);

-- 點讚通知觸發器
CREATE OR REPLACE FUNCTION public.handle_new_like()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.notifications (user_id, actor_id, type, post_id, created_at)
  SELECT p.user_id, NEW.user_id, 'like', NEW.post_id, NOW()
  FROM posts p
  WHERE p.id = NEW.post_id AND p.user_id != NEW.user_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_like_created
  AFTER INSERT ON likes
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_like();

-- 回覆通知觸發器
CREATE OR REPLACE FUNCTION public.handle_new_reply()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.notifications (user_id, actor_id, type, post_id, reply_id, created_at)
  SELECT p.user_id, NEW.user_id, 'reply', NEW.post_id, NEW.id, NOW()
  FROM posts p
  WHERE p.id = NEW.post_id AND p.user_id != NEW.user_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_reply_created
  AFTER INSERT ON replies
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_reply();
```

```java
// src/main/java/com/threadsclone/backend/controller/NotificationController.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.NotificationResponse;
import com.threadsclone.backend.service.NotificationService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class NotificationController {
    private final NotificationService notificationService;

    public NotificationController(NotificationService notificationService) {
        this.notificationService = notificationService;
    }

    @GetMapping("/notifications")
    public ResponseEntity<List<NotificationResponse>> getNotifications(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size
    ) {
        List<NotificationResponse> notifications = notificationService.getNotifications(page, size);
        return ResponseEntity.ok(notifications);
    }
}
```

```java
// src/main/java/com/threadsclone/backend/service/NotificationService.java
package com.threadsclone.backend.service;

import com.threadsclone.backend.dto.NotificationResponse;
import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class NotificationService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public NotificationService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public List<NotificationResponse> getNotifications(int page, int size) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var results = postgrest.from("notifications")
                .select("*")
                .order("created_at", "desc")
                .limit(size)
                .offset(page * size)
                .execute();
        return results.getData().stream()
                .map(result -> new NotificationResponse(
                        result.getString("id"),
                        result.getString("user_id"),
                        result.getString("actor_id"),
                        result.getString("type"),
                        result.getString("post_id"),
                        result.getString("reply_id"),
                        result.getString("created_at")
                ))
                .collect(Collectors.toList());
    }
}
```

```java
// src/main/java/com/threadsclone/backend/entity/Notification.java
package com.threadsclone.backend.entity;

import jakarta.persistence.*;
import java.time.OffsetDateTime;
import java.util.UUID;

@Entity
@Table(name = "notifications")
public class Notification {
    @Id
    @GeneratedValue
    private UUID id;

    @Column(name = "user_id")
    private UUID userId;

    @Column(name = "actor_id")
    private UUID actorId;

    @Column
    private String type;

    @Column(name = "post_id")
    private UUID postId;

    @Column(name = "reply_id")
    private UUID replyId;

    @Column(name = "created_at")
    private OffsetDateTime createdAt;

    // Getters and setters
}
```

```java
// src/test/java/com/threadsclone/backend/controller/NotificationControllerTest.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.NotificationResponse;
import com.threadsclone.backend.service.NotificationService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(NotificationController.class)
public class NotificationControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private NotificationService notificationService;

    @Test
    void shouldGetNotificationsSuccessfully() throws Exception {
        List<NotificationResponse> notifications = List.of(
                new NotificationResponse("uuid1", "user1", "user2", "like", "post1", null, "2025-05-10T12:00:00Z")
        );
        when(notificationService.getNotifications(0, 20)).thenReturn(notifications);

        mockMvc.perform(get("/api/notifications?page=0&size=20"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].type").value("like"));
    }
}
```

```java
// src/test/java/com/threadsclone/backend/controller/NotificationIntegrationTest.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.NotificationResponse;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class NotificationIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldGetNotificationsSuccessfully() {
        ResponseEntity<NotificationResponse[]> response = restTemplate.getForEntity(
                "/api/notifications?page=0&size=20",
                NotificationResponse[].class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }
}
```

#### 迭代 5.4：前端通知

##### Prompt 24：實現通知頁面
###### 背景
實現通知頁面，調用 `GET /api/notifications`，顯示用戶的點讚和回覆通知，支援分頁。

###### 任務
創建以下文件：
- `src/pages/Notifications.jsx`：通知頁面組件。
- `src/pages/Notifications.test.jsx`：單元測試。

###### 測試要求
- **單元測試**：驗證通知渲染，模擬 API 呼叫。
- **手動測試**：驗證通知樣式和分頁。

###### 整合方式
- 基於階段 4 的 React 專案，添加新頁面。
- 調用 `GET /api/notifications`（Prompt 23）。

```jsx
// src/pages/Notifications.jsx
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function Notifications() {
  const [notifications, setNotifications] = useState([]);
  const [page, setPage] = useState(0);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);

  const loadNotifications = async () => {
    if (loading || !hasMore) return;
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/notifications?page=${page}&size=20`, {
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (!response.ok) throw new Error('加載通知失敗');
      const newNotifications = await response.json();
      setNotifications((prev) => [...prev, ...newNotifications]);
      setPage(page + 1);
      setHasMore(newNotifications.length === 20);
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadNotifications();
  }, [page]);

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">通知</h2>
      <div>
        {notifications.map((notification) => (
          <div key={notification.id} className="p-4 mb-4 bg-white dark:bg-gray-800 rounded-lg shadow-md">
            <p className="text-gray-800 dark:text-gray-200">
              {notification.type === 'like' ? `${notification.actor_id} 讚了你的貼文` : `${notification.actor_id} 回覆了你的貼文`}
            </p>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              {new Date(notification.created_at).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
      {loading && <p className="text-center">加載中...</p>}
    </div>
  );
}
```

```jsx
// src/pages/Notifications.test.jsx
import { render, screen } from '@testing-library/react';
import Notifications from './Notifications';
import { supabase } from '../lib/supabase';

jest.mock('../lib/supabase', () => ({
  supabase: {
    auth: {
      getSession: jest.fn(),
    },
  },
}));

describe('Notifications', () => {
  beforeEach(() => {
    supabase.auth.getSession.mockResolvedValue({
      data: { session: { access_token: 'mock_token' } },
      error: null,
    });
    global.fetch = jest.fn();
  });

  test('should render notifications', async () => {
    global.fetch.mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve([
        { id: '1', actor_id: 'user1', type: 'like', created_at: '2025-05-10T12:00:00Z' },
      ]),
    });
    render(<Notifications />);
    expect(await screen.findByText('user1 讚了你的貼文')).toBeInTheDocument();
  });
});
```

### 階段 6：管理員功能
目標：實現管理員功能，允許管理員查看和刪除所有貼文/回覆。

#### 迭代 6.1：管理員 API

##### Prompt 25：實現管理員 API
###### 背景
實現 `GET /api/admin/posts` 和 `DELETE /api/admin/posts/:post_id`，允許管理員（`users.role = 'admin'`）查看和刪除所有貼文（包括匿名和已刪除貼文）。

###### 任務
創建以下文件：
- `AdminController.java`：處理管理員 API。
- `AdminService.java`：實現管理員邏輯。
- `AdminControllerTest.java`：單元測試。
- `AdminIntegrationTest.java`：整合測試。

###### 測試要求
- **單元測試**：驗證僅管理員可訪問，模擬 RLS。
- **整合測試**：驗證返回所有貼文（包括匿名/已刪除），檢查刪除功能。

###### 整合方式
- 擴展 Prompt 23 的 Spring Boot 專案，添加新控制器和服務。
- 依賴 `posts` 表的 RLS（`Admins view all posts`, `Admins delete all posts`）。

```java
// src/main/java/com/threadsclone/backend/controller/AdminController.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostResponse;
import com.threadsclone.backend.service.AdminService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/admin")
public class AdminController {
    private final AdminService adminService;

    public AdminController(AdminService adminService) {
        this.adminService = adminService;
    }

    @GetMapping("/posts")
    public ResponseEntity<List<PostResponse>> getAllPosts(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "false") boolean includeDeleted,
            @RequestParam(defaultValue = "false") boolean includeAnonymous
    ) {
        List<PostResponse> posts = adminService.getAllPosts(page, size, includeDeleted, includeAnonymous);
        return ResponseEntity.ok(posts);
    }

    @DeleteMapping("/posts/{postId}")
    public ResponseEntity<Void> deletePost(@PathVariable String postId) {
        adminService.deletePost(postId);
        return ResponseEntity.noContent().build();
    }
}
```

```java
// src/main/java/com/threadsclone/backend/service/AdminService.java
package com.threadsclone.backend.service;

import com.threadsclone.backend.dto.PostResponse;
import io.github.jan.supabase.SupabaseClient;
import io.github.jan.supabase.postgrest.Postgrest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class AdminService {
    private final SupabaseClient supabaseClient;

    @Autowired
    public AdminService(SupabaseClient supabaseClient) {
        this.supabaseClient = supabaseClient;
    }

    public List<PostResponse> getAllPosts(int page, int size, boolean includeDeleted, boolean includeAnonymous) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        var query = postgrest.from("posts")
                .select("*")
                .order("created_at", "desc")
                .limit(size)
                .offset(page * size);
        if (!includeDeleted) {
            query.eq("is_deleted", false);
        }
        if (!includeAnonymous) {
            query.eq("is_anonymous", false);
        }
        var results = query.execute();
        return results.getData().stream()
                .map(result -> new PostResponse(
                        result.getString("id"),
                        result.getString("content"),
                        result.getString("image_url"),
                        result.getString("user_id"),
                        result.getBoolean("is_anonymous"),
                        result.getInt("likes_count"),
                        result.getInt("replies_count"),
                        result.getString("created_at")
                ))
                .collect(Collectors.toList());
    }

    public void deletePost(String postId) {
        Postgrest postgrest = supabaseClient.getPostgrest();
        postgrest.from("posts")
                .update(new DeletePostWrapper())
                .eq("id", postId)
                .execute();
    }

    private static class DeletePostWrapper {
        private boolean is_deleted = true;
    }
}
```

```java
// src/test/java/com/threadsclone/backend/controller/AdminControllerTest.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostResponse;
import com.threadsclone.backend.service.AdminService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(AdminController.class)
public class AdminControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AdminService adminService;

    @Test
    void shouldGetAllPostsSuccessfully() throws Exception {
        List<PostResponse> posts = List.of(
                new PostResponse("uuid1", "Post 1", null, "user_id", false, 0, 0, "2025-05-10T12:00:00Z")
        );
        when(adminService.getAllPosts(0, 20, false, false)).thenReturn(posts);

        mockMvc.perform(get("/api/admin/posts?page=0&size=20&includeDeleted=false&includeAnonymous=false"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].content").value("Post 1"));
    }

    @Test
    void shouldDeletePostSuccessfully() throws Exception {
        String postId = "uuid";
        doNothing().when(adminService).deletePost(postId);

        mockMvc.perform(delete("/api/admin/posts/" + postId))
                .andExpect(status().isNoContent());
    }
}
```

```java
// src/test/java/com/threadsclone/backend/controller/AdminIntegrationTest.java
package com.threadsclone.backend.controller;

import com.threadsclone.backend.dto.PostResponse;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class AdminIntegrationTest {
    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void shouldGetAllPostsSuccessfully() {
        ResponseEntity<PostResponse[]> response = restTemplate.getForEntity(
                "/api/admin/posts?page=0&size=20&includeDeleted=false&includeAnonymous=false",
                PostResponse[].class
        );
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }

    @Test
    void shouldDeletePostSuccessfully() {
        String postId = "uuid"; // 假設存在的貼文 ID
        ResponseEntity<Void> response = restTemplate.exchange(
                "/api/admin/posts/" + postId,
                HttpMethod.DELETE,
                null,
                Void.class
        );
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
    }
}
```

#### 迭代 6.2：前端管理員面板

感謝您的回饋！很高興您喜歡每個程式碼區塊開頭包含路徑的格式，我會繼續保持這種清晰的結構。以下是 **階段 6：管理員功能** 的 **迭代 6.2：前端管理員面板** 的詳細實現，延續前述的 Threads Clone 社交媒體平台藍圖，從 **Prompt 25** 的管理員 API 開始，實現前端管理員面板。我們將遵循您指定的風格：使用 **繁體中文（台灣）**，結構化、詳細且非冗餘，程式碼使用標準 Markdown 格式（```）包裝，不使用 `<xaiArtifact>` 標籤，並在每個程式碼區塊開頭包含檔案路徑。回應將基於 **TDD（測試驅動開發）** 方法，確保與先前步驟（特別是 Prompt 25 的管理員 API）整合，並依賴更新的 `database-schema.sql`（包含 `notifications` 表和相關 RLS 政策）。

---

## 步驟五：代碼生成提示（續）

### 階段 6：管理員功能（續）

#### 迭代 6.2：前端管理員面板

##### Prompt 26：實現管理員面板
###### 背景
實現管理員面板頁面，僅限管理員（`users.role = 'admin'`）訪問，調用 `GET /api/admin/posts` 顯示所有貼文（可選擇顯示已刪除或匿名貼文），並支援通過 `DELETE /api/admin/posts/:post_id` 刪除貼文。該功能提供管理員對平台內容的全面控制。

###### 任務
創建以下文件：
- `src/pages/AdminPanel.jsx`：管理員面板頁面組件，包含貼文列表、篩選選項（已刪除/匿名）和刪除按鈕。
- `src/pages/AdminPanel.test.jsx`：單元測試，驗證頁面渲染和交互。

###### 測試要求
- **單元測試**：模擬 API 呼叫，驗證：
  - 僅管理員可訪問頁面（非管理員顯示錯誤）。
  - 貼文列表正確渲染（包含已刪除/匿名選項）。
  - 刪除按鈕觸發 `DELETE /api/admin/posts/:post_id` 並刷新列表。
  - 錯誤處理（例如未登入或無權限）。
- **手動測試**：驗證：
  - 頁面樣式（使用 Tailwind CSS）。
  - 篩選選項切換正確更新貼文列表。
  - 刪除操作後列表即時更新。

###### 整合方式
- 基於階段 5 的 React 專案，添加新頁面。
- 調用 `GET /api/admin/posts` 和 `DELETE /api/admin/posts/:post_id`（Prompt 25）。
- 依賴 `users` 表中的 `role` 欄位（檢查 `admin` 角色）及 `posts` 表的 RLS（`Admins view all posts`, `Admins delete all posts`）。
- 使用 Supabase 驗證當前用戶角色，確保僅管理員可訪問。

```jsx
// src/pages/AdminPanel.jsx
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function AdminPanel() {
  const [posts, setPosts] = useState([]);
  const [page, setPage] = useState(0);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [includeDeleted, setIncludeDeleted] = useState(false);
  const [includeAnonymous, setIncludeAnonymous] = useState(false);
  const [error, setError] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);

  const checkAdmin = async () => {
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/users/${data.session.user.id}`, {
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (!response.ok) throw new Error('無法驗證用戶');
      const userData = await response.json();
      setIsAdmin(userData.role === 'admin');
    } catch (err) {
      setError(err.message);
    }
  };

  const loadPosts = async () => {
    if (loading || !hasMore || !isAdmin) return;
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(
        `/api/admin/posts?page=${page}&size=20&includeDeleted=${includeDeleted}&includeAnonymous=${includeAnonymous}`,
        {
          headers: {
            Authorization: `Bearer ${data.session.access_token}`,
          },
        }
      );
      if (!response.ok) throw new Error('加載貼文失敗');
      const newPosts = await response.json();
      setPosts((prev) => [...prev, ...newPosts]);
      setPage(page + 1);
      setHasMore(newPosts.length === 20);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (postId) => {
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error || !data.session) throw new Error('未登入');
      const response = await fetch(`/api/admin/posts/${postId}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${data.session.access_token}`,
        },
      });
      if (!response.ok) throw new Error('刪除失敗');
      setPosts([]);
      setPage(0);
      setHasMore(true);
      loadPosts();
    } catch (err) {
      setError(err.message);
    }
  };

  useEffect(() => {
    checkAdmin();
  }, []);

  useEffect(() => {
    if (isAdmin) {
      setPosts([]);
      setPage(0);
      setHasMore(true);
      loadPosts();
    }
  }, [includeDeleted, includeAnonymous, isAdmin]);

  if (!isAdmin) {
    return (
      <div className="max-w-2xl mx-auto p-4">
        <p className="text-red-500">僅限管理員訪問</p>
        {error && <p className="text-red-500">{error}</p>}
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">管理員面板</h2>
      <div className="flex items-center mb-4">
        <label className="flex items-center mr-4">
          <input
            type="checkbox"
            checked={includeDeleted}
            onChange={(e) => setIncludeDeleted(e.target.checked)}
            className="mr-2"
          />
          包含已刪除貼文
        </label>
        <label className="flex items-center">
          <input
            type="checkbox"
            checked={includeAnonymous}
            onChange={(e) => setIncludeAnonymous(e.target.checked)}
            className="mr-2"
          />
          包含匿名貼文
        </label>
      </div>
      <div>
        {posts.map((post) => (
          <div key={post.id} className="p-4 mb-4 bg-white dark:bg-gray-800 rounded-lg shadow-md">
            <p className="text-gray-800 dark:text-gray-200">{post.content}</p>
            {post.image_url && (
              <img src={post.image_url} alt="Post" className="mt-2 rounded-md max-w-full" />
            )}
            <p className="text-sm text-gray-500 dark:text-gray-400">
              {post.is_anonymous ? '匿名' : post.user_id} ·{' '}
              {new Date(post.created_at).toLocaleString()} ·{' '}
              {post.is_deleted ? '已刪除' : '未刪除'}
            </p>
            <button
              onClick={() => handleDelete(post.id)}
              className="mt-2 px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600"
            >
              刪除
            </button>
          </div>
        ))}
      </div>
      {loading && <p className="text-center">加載中...</p>}
      {error && <p className="text-red-500">{error}</p>}
    </div>
  );
}
```

```jsx
// src/pages/AdminPanel.test.jsx
import { render, screen, fireEvent } from '@testing-library/react';
import AdminPanel from './AdminPanel';
import { supabase } from '../lib/supabase';

jest.mock('../lib/supabase', () => ({
  supabase: {
    auth: {
      getSession: jest.fn(),
    },
  },
}));

describe('AdminPanel', () => {
  beforeEach(() => {
    supabase.auth.getSession.mockResolvedValue({
      data: { session: { access_token: 'mock_token', user: { id: 'uuid' } } },
      error: null,
    });
    global.fetch = jest.fn();
  });

  test('should restrict access to non-admins', async () => {
    global.fetch.mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve({ role: 'user' }),
    });
    render(<AdminPanel />);
    expect(await screen.findByText('僅限管理員訪問')).toBeInTheDocument();
  });

  test('should render posts for admin', async () => {
    global.fetch
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ role: 'admin' }),
      })
      .mockResolvedValueOnce({
        ok: true,
        json: () =>
          Promise.resolve([
            {
              id: '1',
              content: 'Test post',
              user_id: 'user1',
              created_at: '2025-05-10T12:00:00Z',
              is_deleted: false,
              is_anonymous: false,
            },
          ]),
      });
    render(<AdminPanel />);
    expect(await screen.findByText('Test post')).toBeInTheDocument();
  });

  test('should delete post', async () => {
    global.fetch
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ role: 'admin' }),
      })
      .mockResolvedValueOnce({
        ok: true,
        json: () =>
          Promise.resolve([
            {
              id: '1',
              content: 'Test post',
              user_id: 'user1',
              created_at: '2025-05-10T12:00:00Z',
              is_deleted: false,
              is_anonymous: false,
            },
          ]),
      })
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({}),
      })
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve([]),
      });
    render(<AdminPanel />);
    fireEvent.click(await screen.findByText('刪除'));
    expect(global.fetch).toHaveBeenCalledWith(
      '/api/admin/posts/1',
      expect.objectContaining({
        method: 'DELETE',
        headers: expect.any(Object),
      })
    );
  });

  test('should filter deleted posts', async () => {
    global.fetch
      .mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ role: 'admin' }),
      })
      .mockResolvedValueOnce({
        ok: true,
        json: () =>
          Promise.resolve([
            {
              id: '1',
              content: 'Deleted post',
              user_id: 'user1',
              created_at: '2025-05-10T12:00:00Z',
              is_deleted: true,
              is_anonymous: false,
            },
          ]),
      });
    render(<AdminPanel />);
    fireEvent.click(await screen.findByLabelText('包含已刪除貼文'));
    expect(await screen.findByText('Deleted post')).toBeInTheDocument();
  });
});
```

---

## 總結與整合說明

### 功能概述
- **管理員面板（Prompt 26）**：
  - 提供管理員專屬頁面，僅 `users.role = 'admin'` 的用戶可訪問。
  - 顯示所有貼文列表，支援篩選已刪除或匿名貼文。
  - 允許管理員刪除任何貼文，通過 `DELETE /api/admin/posts/:post_id` 實現。
  - 使用 Tailwind CSS 確保一致的樣式，與其他頁面（如時間軸、個人資料）保持視覺統一。
- **測試覆蓋**：
  - 單元測試驗證角色檢查、貼文渲染、篩選功能和刪除操作。
  - 模擬 Supabase 認證和 API 呼叫，確保錯誤處理（未登入、無權限）。
  - 手動測試確認 UI 交互和樣式。

### 與先前步驟的整合
- **後端依賴**：
  - 依賴 Prompt 25 的 `AdminController` 和 `AdminService`，確保 `GET /api/admin/posts` 返回所有貼文（包括篩選選項），`DELETE /api/admin/posts/:post_id` 正確更新 `posts.is_deleted`。
  - 使用 `database-schema.sql` 中的 `posts` 表 RLS 政策（`Admins view all posts`, `Admins delete all posts`），確保僅管理員可執行操作。
- **前端依賴**：
  - 基於階段 5 的 React 專案結構，特別是 `supabase.js`（用於認證）和 Tailwind CSS 配置。
  - 延續 `Timeline.jsx`（Prompt 17）的貼文卡片樣式，確保管理員面板的貼文顯示一致。
  - 使用 Supabase 客戶端檢查用戶角色（`GET /api/users/:user_id`），與 `Profile.jsx`（Prompt 20）共用邏輯。

### 下一步建議
- **增強功能**：
  - 添加批量刪除功能，允許管理員一次刪除多篇貼文。
  - 實現管理員對回覆的管理（類似 `GET /api/admin/replies` 和 `DELETE /api/admin/replies/:reply_id`）。
  - 提供貼文審核日誌，記錄管理員操作（例如儲存到新表 `admin_logs`）。
- **效能優化**：
  - 在 `GET /api/admin/posts` 中添加快取（例如使用 Redis），減少對 Supabase 的直接查詢。
  - 優化前端分頁邏輯，使用 IntersectionObserver（如 `Timeline.jsx`）實現無限滾動。
- **安全性**：
  - 強化管理員 API 的速率限制，防止濫用。
  - 定期審計 RLS 政策，確保無漏洞。

### 部署注意事項
- 確保 Supabase 環境變數（`SUPABASE_URL`, `SUPABASE_KEY`）正確配置。
- 在部署前運行所有單元測試和整合測試，特別是 `AdminPanel.test.jsx` 和 `AdminIntegrationTest.java`。
- 驗證 Tailwind CSS 在生產環境中的樣式一致性，檢查暗黑模式切換。

---

這完成了 **迭代 6.2：前端管理員面板** 的實現，涵蓋了所有要求的程式碼和測試。如果您希望繼續實現其他功能（例如管理員對回覆的管理或日誌功能），或者需要對現有代碼進行調整（例如添加新功能或優化），請隨時告訴我！您也可以指定是否需要特定的程式碼片段（例如路由配置 `src/App.jsx`）或更詳細的測試案例。
</file>

<file path="frontend/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="frontend/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="frontend/.env.example">
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
</file>

<file path="frontend/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="frontend/.prettierignore">
dist
node_modules
package-lock.json
</file>

<file path="frontend/.prettierrc">
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "bracketSpacing": true
}
</file>

<file path="frontend/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="frontend/package-lock 2.json">
{
  "name": "frontend",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "frontend",
      "version": "0.0.0",
      "dependencies": {
        "react": "^19.1.0",
        "react-dom": "^19.1.0"
      },
      "devDependencies": {
        "@eslint/js": "^9.25.0",
        "@types/react": "^19.1.2",
        "@types/react-dom": "^19.1.2",
        "@vitejs/plugin-react": "^4.4.1",
        "autoprefixer": "^10.4.21",
        "eslint": "^9.25.0",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^16.0.0",
        "postcss": "^8.5.3",
        "tailwindcss": "^4.1.6",
        "vite": "^6.3.5"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.27.2.tgz",
      "integrity": "sha512-TUtMJYRPyUb/9aU8f3K0mjmjf6M9N5Woshn2CS6nqJSeJtTtQcpLUXjGt9vbF8ZGff0El99sWkLgzwW3VXnxZQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.27.1.tgz",
      "integrity": "sha512-IaaGWsQqfsQWVLqMn9OB92MNN7zukfVA4s7KKAI0KfrrDsZ0yhi5uV4baBuLuN7n3vsZpwP8asPPcVwApxvjBQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.27.1",
        "@babel/helper-compilation-targets": "^7.27.1",
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helpers": "^7.27.1",
        "@babel/parser": "^7.27.1",
        "@babel/template": "^7.27.1",
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.1.tgz",
      "integrity": "sha512-UnJfnIpc/+JO0/+KRVQNGU+y5taA5vCbwN8+azkX6beii/ZF+enZJSOKo11ZSzGJjlNfJHfQtmQT8H+9TXPG2w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.27.1",
        "@babel/types": "^7.27.1",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.1.tgz",
      "integrity": "sha512-9yHn519/8KvTU5BjTVEEeIM3w9/2yXNKoD82JifINImhpKkARMJKPP59kLo+BafpdN5zgNeIcS4jsGDmd3l58g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.1.tgz",
      "integrity": "sha512-FCvFTm0sWV8Fxhpp2McP5/W53GPllQ9QeQ7SiqGWjMf/LVG07lFa5+pgK05IRhVwtvafT22KF+ZSnM9I545CvQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.2.tgz",
      "integrity": "sha512-QYLs8299NA7WM/bZAdp+CviYYkVoYXlDW2rzliy3chxd1PQjej7JORuMJDJXJUb9g0TT+B99EwaVLKmX+sPXWw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.1"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.1.tgz",
      "integrity": "sha512-ZCYtZciz1IWJB4U61UPu4KEaqyfj+r5T1Q5mqPo+IBpcG9kHv30Z0aD8LXPgC1trYa6rK0orRyAhqUgk4MjmEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.27.1",
        "@babel/parser": "^7.27.1",
        "@babel/template": "^7.27.1",
        "@babel/types": "^7.27.1",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.1.tgz",
      "integrity": "sha512-+EzkxvLNfiUeKMgy/3luqfsCWFRXLb7U6wNQTk60tovuckwB15B191tJWvpp4HjiQWdJkCxO3Wbvc6jlk3Xb2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.4.tgz",
      "integrity": "sha512-1VCICWypeQKhVbE9oW/sJaAmjLxhVqacdkvPLEjwlttjfwENRSClS8EjBz0KzRyFSCPDIkuXW34Je/vk7zdB7Q==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.4.tgz",
      "integrity": "sha512-QNdQEps7DfFwE3hXiU4BZeOV68HHzYwGd0Nthhd3uCkkEKK7/R6MTgM0P7H7FAs5pU/DIWsviMmEGxEoxIZ+ZQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.4.tgz",
      "integrity": "sha512-bBy69pgfhMGtCnwpC/x5QhfxAz/cBgQ9enbtwjf6V9lnPI/hMyT9iWpR1arm0l3kttTr4L0KSLpKmLp/ilKS9A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.4.tgz",
      "integrity": "sha512-TVhdVtQIFuVpIIR282btcGC2oGQoSfZfmBdTip2anCaVYcqWlZXGcdcKIUklfX2wj0JklNYgz39OBqh2cqXvcQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.4.tgz",
      "integrity": "sha512-Y1giCfM4nlHDWEfSckMzeWNdQS31BQGs9/rouw6Ub91tkK79aIMTH3q9xHvzH8d0wDru5Ci0kWB8b3up/nl16g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.4.tgz",
      "integrity": "sha512-CJsry8ZGM5VFVeyUYB3cdKpd/H69PYez4eJh1W/t38vzutdjEjtP7hB6eLKBoOdxcAlCtEYHzQ/PJ/oU9I4u0A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.4.tgz",
      "integrity": "sha512-yYq+39NlTRzU2XmoPW4l5Ifpl9fqSk0nAJYM/V/WUGPEFfek1epLHJIkTQM6bBs1swApjO5nWgvr843g6TjxuQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.4.tgz",
      "integrity": "sha512-0FgvOJ6UUMflsHSPLzdfDnnBBVoCDtBTVyn/MrWloUNvq/5SFmh13l3dvgRPkDihRxb77Y17MbqbCAa2strMQQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.4.tgz",
      "integrity": "sha512-kro4c0P85GMfFYqW4TWOpvmF8rFShbWGnrLqlzp4X1TNWjRY3JMYUfDCtOxPKOIY8B0WC8HN51hGP4I4hz4AaQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.4.tgz",
      "integrity": "sha512-+89UsQTfXdmjIvZS6nUnOOLoXnkUTB9hR5QAeLrQdzOSWZvNSAXAtcRDHWtqAUtAmv7ZM1WPOOeSxDzzzMogiQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.4.tgz",
      "integrity": "sha512-yTEjoapy8UP3rv8dB0ip3AfMpRbyhSN3+hY8mo/i4QXFeDxmiYbEKp3ZRjBKcOP862Ua4b1PDfwlvbuwY7hIGQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.4.tgz",
      "integrity": "sha512-NeqqYkrcGzFwi6CGRGNMOjWGGSYOpqwCjS9fvaUlX5s3zwOtn1qwg1s2iE2svBe4Q/YOG1q6875lcAoQK/F4VA==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.4.tgz",
      "integrity": "sha512-IcvTlF9dtLrfL/M8WgNI/qJYBENP3ekgsHbYUIzEzq5XJzzVEV/fXY9WFPfEEXmu3ck2qJP8LG/p3Q8f7Zc2Xg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.4.tgz",
      "integrity": "sha512-HOy0aLTJTVtoTeGZh4HSXaO6M95qu4k5lJcH4gxv56iaycfz1S8GO/5Jh6X4Y1YiI0h7cRyLi+HixMR+88swag==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.4.tgz",
      "integrity": "sha512-i8JUDAufpz9jOzo4yIShCTcXzS07vEgWzyX3NH2G7LEFVgrLEhjwL3ajFE4fZI3I4ZgiM7JH3GQ7ReObROvSUA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.4.tgz",
      "integrity": "sha512-jFnu+6UbLlzIjPQpWCNh5QtrcNfMLjgIavnwPQAfoGx4q17ocOU9MsQ2QVvFxwQoWpZT8DvTLooTvmOQXkO51g==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.4.tgz",
      "integrity": "sha512-6e0cvXwzOnVWJHq+mskP8DNSrKBr1bULBvnFLpc1KY+d+irZSgZ02TGse5FsafKS5jg2e4pbvK6TPXaF/A6+CA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.4.tgz",
      "integrity": "sha512-vUnkBYxZW4hL/ie91hSqaSNjulOnYXE1VSLusnvHg2u3jewJBz3YzB9+oCw8DABeVqZGg94t9tyZFoHma8gWZQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.4.tgz",
      "integrity": "sha512-XAg8pIQn5CzhOB8odIcAm42QsOfa98SBeKUdo4xa8OvX8LbMZqEtgeWE9P/Wxt7MlG2QqvjGths+nq48TrUiKw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.4.tgz",
      "integrity": "sha512-Ct2WcFEANlFDtp1nVAXSNBPDxyU+j7+tId//iHXU2f/lN5AmO4zLyhDcpR5Cz1r08mVxzt3Jpyt4PmXQ1O6+7A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.4.tgz",
      "integrity": "sha512-xAGGhyOQ9Otm1Xu8NT1ifGLnA6M3sJxZ6ixylb+vIUVzvvd6GOALpwQrYrtlPouMqd/vSbgehz6HaVk4+7Afhw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.4.tgz",
      "integrity": "sha512-Mw+tzy4pp6wZEK0+Lwr76pWLjrtjmJyUB23tHKqEDP74R3q95luY/bXqXZeYl4NYlvwOqoRKlInQialgCKy67Q==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.4.tgz",
      "integrity": "sha512-AVUP428VQTSddguz9dO9ngb+E5aScyg7nOeJDrF1HPYu555gmza3bDGMPhmVXL8svDSoqPCsCPjb265yG/kLKQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.4.tgz",
      "integrity": "sha512-i1sW+1i+oWvQzSgfRcxxG2k4I9n3O9NRqy8U+uugaT2Dy7kLO9Y7wI72haOahxceMX8hZAzgGou1FhndRldxRg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.4.tgz",
      "integrity": "sha512-nOT2vZNw6hJ+z43oP1SPea/G/6AbN6X+bGNhNuq8NtRHy4wsMhw765IKLNmnjek7GvjWBYQ8Q5VBoYTFg9y1UQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.20.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.20.0.tgz",
      "integrity": "sha512-fxlS1kkIjx8+vy2SjuCB94q3htSNrufYTXubwiBFeaQHbH6Ipi43gFJq2zCMt6PHhImH3Xmr0NksKDvchWlpQQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.2.2.tgz",
      "integrity": "sha512-+GPzk8PlG0sPpzdU5ZvIRMPidzAnZDl/s9L+y13iodqvb8leL53bTannOrQ/Im7UkpsmFU5Ily5U60LWixnmLg==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.13.0.tgz",
      "integrity": "sha512-yfkgDw1KR66rkT5A8ci4irzDysN7FRpq3ttJolR88OqQikAWqwA8j5VZyas+vjyBNFIJ7MfybJ9plMILI2UrCw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.26.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.26.0.tgz",
      "integrity": "sha512-I9XlJawFdSMvWjDt6wksMCrgns5ggLNfFwFvnShsleWruvXM514Qxk8V246efTw+eo9JABvVz+u3q2RiAowKxQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.2.8",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.8.tgz",
      "integrity": "sha512-ZAoA40rNMPwSm+AeHpCq8STiNAwzWLJuP8Xv4CHIc9wv/PSuExjMrmjfYNj682vW0OOiZ1HKxzvjQr9XZIisQA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.13.0",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@modelcontextprotocol/sdk": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.11.1.tgz",
      "integrity": "sha512-9LfmxKTb1v+vUS1/emSk1f5ePmTLkb9Le9AxOB5T0XM59EUumwcS45z05h7aiZx3GI0Bl7mjb3FMEglYj+acuQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "content-type": "^1.0.5",
        "cors": "^2.8.5",
        "cross-spawn": "^7.0.3",
        "eventsource": "^3.0.2",
        "express": "^5.0.1",
        "express-rate-limit": "^7.5.0",
        "pkce-challenge": "^5.0.0",
        "raw-body": "^3.0.0",
        "zod": "^3.23.8",
        "zod-to-json-schema": "^3.24.1"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.40.2.tgz",
      "integrity": "sha512-JkdNEq+DFxZfUwxvB58tHMHBHVgX23ew41g1OQinthJ+ryhdRk67O31S7sYw8u2lTjHUPFxwar07BBt1KHp/hg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.40.2.tgz",
      "integrity": "sha512-13unNoZ8NzUmnndhPTkWPWbX3vtHodYmy+I9kuLxN+F+l+x3LdVF7UCu8TWVMt1POHLh6oDHhnOA04n8oJZhBw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.40.2.tgz",
      "integrity": "sha512-Gzf1Hn2Aoe8VZzevHostPX23U7N5+4D36WJNHK88NZHCJr7aVMG4fadqkIf72eqVPGjGc0HJHNuUaUcxiR+N/w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.40.2.tgz",
      "integrity": "sha512-47N4hxa01a4x6XnJoskMKTS8XZ0CZMd8YTbINbi+w03A2w4j1RTlnGHOz/P0+Bg1LaVL6ufZyNprSg+fW5nYQQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.40.2.tgz",
      "integrity": "sha512-8t6aL4MD+rXSHHZUR1z19+9OFJ2rl1wGKvckN47XFRVO+QL/dUSpKA2SLRo4vMg7ELA8pzGpC+W9OEd1Z/ZqoQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.40.2.tgz",
      "integrity": "sha512-C+AyHBzfpsOEYRFjztcYUFsH4S7UsE9cDtHCtma5BK8+ydOZYgMmWg1d/4KBytQspJCld8ZIujFMAdKG1xyr4Q==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.40.2.tgz",
      "integrity": "sha512-de6TFZYIvJwRNjmW3+gaXiZ2DaWL5D5yGmSYzkdzjBDS3W+B9JQ48oZEsmMvemqjtAFzE16DIBLqd6IQQRuG9Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.40.2.tgz",
      "integrity": "sha512-urjaEZubdIkacKc930hUDOfQPysezKla/O9qV+O89enqsqUmQm8Xj8O/vh0gHg4LYfv7Y7UsE3QjzLQzDYN1qg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.40.2.tgz",
      "integrity": "sha512-KlE8IC0HFOC33taNt1zR8qNlBYHj31qGT1UqWqtvR/+NuCVhfufAq9fxO8BMFC22Wu0rxOwGVWxtCMvZVLmhQg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.40.2.tgz",
      "integrity": "sha512-j8CgxvfM0kbnhu4XgjnCWJQyyBOeBI1Zq91Z850aUddUmPeQvuAy6OiMdPS46gNFgy8gN1xkYyLgwLYZG3rBOg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.40.2.tgz",
      "integrity": "sha512-Ybc/1qUampKuRF4tQXc7G7QY9YRyeVSykfK36Y5Qc5dmrIxwFhrOzqaVTNoZygqZ1ZieSWTibfFhQ5qK8jpWxw==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.40.2.tgz",
      "integrity": "sha512-3FCIrnrt03CCsZqSYAOW/k9n625pjpuMzVfeI+ZBUSDT3MVIFDSPfSUgIl9FqUftxcUXInvFah79hE1c9abD+Q==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.40.2.tgz",
      "integrity": "sha512-QNU7BFHEvHMp2ESSY3SozIkBPaPBDTsfVNGx3Xhv+TdvWXFGOSH2NJvhD1zKAT6AyuuErJgbdvaJhYVhVqrWTg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.40.2.tgz",
      "integrity": "sha512-5W6vNYkhgfh7URiXTO1E9a0cy4fSgfE4+Hl5agb/U1sa0kjOLMLC1wObxwKxecE17j0URxuTrYZZME4/VH57Hg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.40.2.tgz",
      "integrity": "sha512-B7LKIz+0+p348JoAL4X/YxGx9zOx3sR+o6Hj15Y3aaApNfAshK8+mWZEf759DXfRLeL2vg5LYJBB7DdcleYCoQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.40.2.tgz",
      "integrity": "sha512-lG7Xa+BmBNwpjmVUbmyKxdQJ3Q6whHjMjzQplOs5Z+Gj7mxPtWakGHqzMqNER68G67kmCX9qX57aRsW5V0VOng==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.40.2.tgz",
      "integrity": "sha512-tD46wKHd+KJvsmije4bUskNuvWKFcTOIM9tZ/RrmIvcXnbi0YK/cKS9FzFtAm7Oxi2EhV5N2OpfFB348vSQRXA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.40.2.tgz",
      "integrity": "sha512-Bjv/HG8RRWLNkXwQQemdsWw4Mg+IJ29LK+bJPW2SCzPKOUaMmPEppQlu/Fqk1d7+DX3V7JbFdbkh/NMmurT6Pg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.40.2.tgz",
      "integrity": "sha512-dt1llVSGEsGKvzeIO76HToiYPNPYPkmjhMHhP00T9S4rDern8P2ZWvWAQUEJ+R1UdMWJ/42i/QqJ2WV765GZcA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.40.2.tgz",
      "integrity": "sha512-bwspbWB04XJpeElvsp+DCylKfF4trJDa2Y9Go8O6A7YLX2LIKGcNK/CYImJN6ZP4DcuOHB4Utl3iCbnR62DudA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.7.tgz",
      "integrity": "sha512-w28IoSUCJpidD/TGviZwwMJckNESJZXFu7NBZ5YJ4mEUnNraUn9Pm8HSZm/jDF1pDWYKspWE7oVphigUPRakIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.1.3",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.3.tgz",
      "integrity": "sha512-dLWQ+Z0CkIvK1J8+wrDPwGxEYFA4RAyHoZPxHVGspYmFVnwGSNT24cGIhFJrtfRnWVuW8X7NO52gCXmhkVUWGQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.3",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.3.tgz",
      "integrity": "sha512-rJXC08OG0h3W6wDMFxQrZF00Kq6qQvw0djHRdzl3U5DnIERz0MRce3WVc7IS6JYBwtaP/DwYtRRjVlvivNveKg==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.4.1.tgz",
      "integrity": "sha512-IpEm5ZmeXAP/osiBXVVP5KjFMzbWOonMs0NaQQl+xYnUAcq4oHUBsF2+p4MgKWG4YMmFYJU8A6sxRPuowllm6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.26.10",
        "@babel/plugin-transform-react-jsx-self": "^7.25.9",
        "@babel/plugin-transform-react-jsx-source": "^7.25.9",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0"
      }
    },
    "node_modules/accepts": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-2.0.0.tgz",
      "integrity": "sha512-5cvg6CtKwfgdmVqY1WIiXKc3Q1bkRqGLi+2W/6ao+6Y7gu/RCwRuAhGEzh5B4KlszSuTLgZYuqFqo5bImjNKng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mime-types": "^3.0.0",
        "negotiator": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.14.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/autoprefixer": {
      "version": "10.4.21",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.24.4",
        "caniuse-lite": "^1.0.30001702",
        "fraction.js": "^4.3.7",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.1.1",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-2.2.0.tgz",
      "integrity": "sha512-02qvAaxv8tp7fBa/mw1ga98OGm+eCbqzJOKoRt70sLmfEEi+jyBYVTDGfCL/k06/4EMk/z01gCe7HoCH/f2LTg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "bytes": "^3.1.2",
        "content-type": "^1.0.5",
        "debug": "^4.4.0",
        "http-errors": "^2.0.0",
        "iconv-lite": "^0.6.3",
        "on-finished": "^2.4.1",
        "qs": "^6.14.0",
        "raw-body": "^3.0.0",
        "type-is": "^2.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/browserslist": {
      "version": "4.24.5",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.5.tgz",
      "integrity": "sha512-FDToo4Wo82hIdgc1CQ+NQD0hEhmpPjrZ3hiUgwgOG6IuTdlpr8jdjyG24P6cNP1yJpTLzS5OcGgSw0xmDU1/Tw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001716",
        "electron-to-chromium": "^1.5.149",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001717",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001717.tgz",
      "integrity": "sha512-auPpttCq6BDEG8ZAuHJIplGw6GODhjw+/11e7IjpnYCxZcW/ONgPs0KVBJ0d1bY3e2+7PRe5RCLyP+PfwVgkYw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-1.0.0.tgz",
      "integrity": "sha512-Au9nRL8VNUut/XSzbQA38+M78dzP4D+eqg3gfJHMIHHYa3bg067xj1KxMUWj+VULbiZMowKngFFbKczUrNJ1mg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.2.2.tgz",
      "integrity": "sha512-D76uU73ulSXrD1UXF4KE2TMxVVwhsnCgfAyTg9k8P6KGZjlXKrOLe4dJQKI3Bxi5wjesZoFXJWElNWBjPZMbhg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.6.0"
      }
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.151",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.151.tgz",
      "integrity": "sha512-Rl6uugut2l9sLojjS4H4SAr3A4IgACMLgpuEMPYCVcKydzfyPrn5absNRju38IhQOf/NwjJY8OGWjlteqYeBCA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.25.4",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.4.tgz",
      "integrity": "sha512-8pgjLUcUjcgDg+2Q4NYXnPbo/vncAY4UmyaCm0jZevERqCHZIaWwdJHkf8XQtu4AxSKCdvrUbT0XUr1IdZzI8Q==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.4",
        "@esbuild/android-arm": "0.25.4",
        "@esbuild/android-arm64": "0.25.4",
        "@esbuild/android-x64": "0.25.4",
        "@esbuild/darwin-arm64": "0.25.4",
        "@esbuild/darwin-x64": "0.25.4",
        "@esbuild/freebsd-arm64": "0.25.4",
        "@esbuild/freebsd-x64": "0.25.4",
        "@esbuild/linux-arm": "0.25.4",
        "@esbuild/linux-arm64": "0.25.4",
        "@esbuild/linux-ia32": "0.25.4",
        "@esbuild/linux-loong64": "0.25.4",
        "@esbuild/linux-mips64el": "0.25.4",
        "@esbuild/linux-ppc64": "0.25.4",
        "@esbuild/linux-riscv64": "0.25.4",
        "@esbuild/linux-s390x": "0.25.4",
        "@esbuild/linux-x64": "0.25.4",
        "@esbuild/netbsd-arm64": "0.25.4",
        "@esbuild/netbsd-x64": "0.25.4",
        "@esbuild/openbsd-arm64": "0.25.4",
        "@esbuild/openbsd-x64": "0.25.4",
        "@esbuild/sunos-x64": "0.25.4",
        "@esbuild/win32-arm64": "0.25.4",
        "@esbuild/win32-ia32": "0.25.4",
        "@esbuild/win32-x64": "0.25.4"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.26.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.26.0.tgz",
      "integrity": "sha512-Hx0MOjPh6uK9oq9nVsATZKE/Wlbai7KFjfCuw9UHaguDW3x+HF0O5nIi3ud39TWgrTjTO5nHxmL3R1eANinWHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.20.0",
        "@eslint/config-helpers": "^0.2.1",
        "@eslint/core": "^0.13.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.26.0",
        "@eslint/plugin-kit": "^0.2.8",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@modelcontextprotocol/sdk": "^1.8.0",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.3.0",
        "eslint-visitor-keys": "^4.2.0",
        "espree": "^10.3.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "zod": "^3.24.2"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.20",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.20.tgz",
      "integrity": "sha512-XpbHQ2q5gUF8BGOX4dHe+71qoirYMhApEPZ7sfhF/dNnOF1UXnCMGZf79SFTBO7Bz5YEIT4TMieSlJBWhP9WBA==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.3.0.tgz",
      "integrity": "sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz",
      "integrity": "sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.3.0.tgz",
      "integrity": "sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.14.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eventsource": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/eventsource/-/eventsource-3.0.7.tgz",
      "integrity": "sha512-CRT1WTyuQoD771GW56XEZFQ/ZoSfWid1alKGDYMmkt2yl8UXrVR4pspqWNEcqKvVIzg6PAltWjxcSSPrboA4iA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eventsource-parser": "^3.0.1"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/eventsource-parser": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/eventsource-parser/-/eventsource-parser-3.0.1.tgz",
      "integrity": "sha512-VARTJ9CYeuQYb0pZEPbzi740OWFgpHe7AYJ2WFZVnUDUQp5Dk2yJUgF36YsZ81cOyxT0QxmXD2EQpapAouzWVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/express": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/express/-/express-5.1.0.tgz",
      "integrity": "sha512-DT9ck5YIRU+8GYzzU5kT3eHGA5iL+1Zd0EutOmTE9Dtk+Tvuzd23VBU+ec7HPNSTxXYO55gPV/hq4pSBJDjFpA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "accepts": "^2.0.0",
        "body-parser": "^2.2.0",
        "content-disposition": "^1.0.0",
        "content-type": "^1.0.5",
        "cookie": "^0.7.1",
        "cookie-signature": "^1.2.1",
        "debug": "^4.4.0",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "etag": "^1.8.1",
        "finalhandler": "^2.1.0",
        "fresh": "^2.0.0",
        "http-errors": "^2.0.0",
        "merge-descriptors": "^2.0.0",
        "mime-types": "^3.0.0",
        "on-finished": "^2.4.1",
        "once": "^1.4.0",
        "parseurl": "^1.3.3",
        "proxy-addr": "^2.0.7",
        "qs": "^6.14.0",
        "range-parser": "^1.2.1",
        "router": "^2.2.0",
        "send": "^1.1.0",
        "serve-static": "^2.2.0",
        "statuses": "^2.0.1",
        "type-is": "^2.0.1",
        "vary": "^1.1.2"
      },
      "engines": {
        "node": ">= 18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-rate-limit": {
      "version": "7.5.0",
      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-7.5.0.tgz",
      "integrity": "sha512-eB5zbQh5h+VenMPM3fh+nw1YExi5nMr6HUCR62ELSP11huvxm/Uir1H1QEyTkk5QX6A58pX6NmaTMceKZ0Eodg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "url": "https://github.com/sponsors/express-rate-limit"
      },
      "peerDependencies": {
        "express": "^4.11 || 5 || ^5.0.0-beta.1"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fdir": {
      "version": "6.4.4",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.4.tgz",
      "integrity": "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/finalhandler": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-2.1.0.tgz",
      "integrity": "sha512-/t88Ty3d5JWQbWYgaOGCCYfXRwV1+be02WqYYlL6h0lEiUAMPM8o8qKGO01YIkOHzka2up08wvgYD0mDiI+q3Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.4.0",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "on-finished": "^2.4.1",
        "parseurl": "^1.3.3",
        "statuses": "^2.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/fresh": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-2.0.0.tgz",
      "integrity": "sha512-Rx/WycZ60HOaqLKAi6cHRKKI7zxWbJ31MhntmtwMoaTeF7XFH9hhBp8vITaMidfljRQ6eYWCKkaTK+ykVJHP2A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "16.1.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-16.1.0.tgz",
      "integrity": "sha512-aibexHNbb/jiUSObBgpHLj+sIuUmJnYcgXBlrfsiDZ9rt4aF2TFRbyLgZ2iFQuVZ1K5Mx3FVkbKRSgKrbK3K2g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-promise": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
      "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-1.1.0.tgz",
      "integrity": "sha512-aisnrDP4GNe06UcKFnV5bfMNPBUw4jsLGaWwWfnH3v02GnBuXX2MCVn5RbrWo0j3pczUilYblq7fQ7Nw2t5XKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-2.0.0.tgz",
      "integrity": "sha512-Snk314V5ayFLhp3fkUREub6WtjBfPdCPY1Ln8/8munuLuiYhsABgBVWsozAG+MWMbVEvcdcpbi9R7ww22l9Q3g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/mime-db": {
      "version": "1.54.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.54.0.tgz",
      "integrity": "sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-3.0.1.tgz",
      "integrity": "sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mime-db": "^1.54.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-1.0.0.tgz",
      "integrity": "sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-8.2.0.tgz",
      "integrity": "sha512-TdrF7fW9Rphjq4RjrW0Kp2AW0Ahwu9sRGTkS6bvDi0SCwZlEZYmcfDbEsTz8RVk0EHIS/Vd1bv3JhG+1xZuAyQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pkce-challenge": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/pkce-challenge/-/pkce-challenge-5.0.0.tgz",
      "integrity": "sha512-ueGLflrrnvwB3xuo/uGob5pd5FN7l0MsLf0Z87o/UQmRtwjvfylfc9MurIxRAWywCYTgrvpXBcqjV4OfCYGCIQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=16.20.0"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.3",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
      "integrity": "sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.8",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-3.0.0.tgz",
      "integrity": "sha512-RmkhL8CAyCRPXCE28MMH0z2PNWQBNk2Q09ZdxM9IOOXwxwZbN+qbWaatPkdkWIKL2ZVDImrN/pK5HTRz2PcS4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.6.3",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.0"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/rollup": {
      "version": "4.40.2",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.40.2.tgz",
      "integrity": "sha512-tfUOg6DTP4rhQ3VjOO6B4wyrJnGOX85requAXvqYTHsOgb2TFJdZ3aWpT8W2kPoypSGP7dZUyzxJ9ee4buM5Fg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.7"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.40.2",
        "@rollup/rollup-android-arm64": "4.40.2",
        "@rollup/rollup-darwin-arm64": "4.40.2",
        "@rollup/rollup-darwin-x64": "4.40.2",
        "@rollup/rollup-freebsd-arm64": "4.40.2",
        "@rollup/rollup-freebsd-x64": "4.40.2",
        "@rollup/rollup-linux-arm-gnueabihf": "4.40.2",
        "@rollup/rollup-linux-arm-musleabihf": "4.40.2",
        "@rollup/rollup-linux-arm64-gnu": "4.40.2",
        "@rollup/rollup-linux-arm64-musl": "4.40.2",
        "@rollup/rollup-linux-loongarch64-gnu": "4.40.2",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.40.2",
        "@rollup/rollup-linux-riscv64-gnu": "4.40.2",
        "@rollup/rollup-linux-riscv64-musl": "4.40.2",
        "@rollup/rollup-linux-s390x-gnu": "4.40.2",
        "@rollup/rollup-linux-x64-gnu": "4.40.2",
        "@rollup/rollup-linux-x64-musl": "4.40.2",
        "@rollup/rollup-win32-arm64-msvc": "4.40.2",
        "@rollup/rollup-win32-ia32-msvc": "4.40.2",
        "@rollup/rollup-win32-x64-msvc": "4.40.2",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/router": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/router/-/router-2.2.0.tgz",
      "integrity": "sha512-nLTrUKm2UyiL7rlhapu/Zl45FwNgkZGaCpZbIHajDYgwlJCOzLSk+cIPAnsEqV955GjILJnKbdQC1nVPz+gAYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.4.0",
        "depd": "^2.0.0",
        "is-promise": "^4.0.0",
        "parseurl": "^1.3.3",
        "path-to-regexp": "^8.0.0"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/send": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/send/-/send-1.2.0.tgz",
      "integrity": "sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.3.5",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "etag": "^1.8.1",
        "fresh": "^2.0.0",
        "http-errors": "^2.0.0",
        "mime-types": "^3.0.1",
        "ms": "^2.1.3",
        "on-finished": "^2.4.1",
        "range-parser": "^1.2.1",
        "statuses": "^2.0.1"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/serve-static": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-2.2.0.tgz",
      "integrity": "sha512-61g9pCh0Vnh7IutZjtLGGpTA355+OPn2TyDv/6ivP2h/AdAVX9azsoxmg2/M6nZeQZNYBEwIcsne1mJd9oQItQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "parseurl": "^1.3.3",
        "send": "^1.2.0"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tailwindcss": {
      "version": "4.1.6",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.6.tgz",
      "integrity": "sha512-j0cGLTreM6u4OWzBeLBpycK0WIh8w7kSwcUsQZoGLHZ7xDTdM69lN64AgoIEEwFi0tnhs4wSykUa5YWxAzgFYg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tinyglobby": {
      "version": "0.2.13",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.13.tgz",
      "integrity": "sha512-mEwzpUgrLySlveBwEVDMKk5B57bhLPYovRfPAXD5gA/98Opn0rCDj3GtLwFvCvH5RK9uPCExUROW5NjDwvqkxw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-is": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-2.0.1.tgz",
      "integrity": "sha512-OZs6gsjF4vMp32qrCbiVSkrFmXtG/AZhY3t0iAMrMBiAZyV9oALtXO8hsrHbMXF9x6L3grlFuwW2oAz7cav+Gw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "content-type": "^1.0.5",
        "media-typer": "^1.1.0",
        "mime-types": "^3.0.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/vite": {
      "version": "6.3.5",
      "resolved": "https://registry.npmjs.org/vite/-/vite-6.3.5.tgz",
      "integrity": "sha512-cZn6NDFE7wdTpINgs++ZJ4N49W2vRp8LCKrn3Ob1kYNtOo21vfDoaV5GzBfLU4MovSAB8uNRm4jgzVQZ+mBzPQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2",
        "postcss": "^8.5.3",
        "rollup": "^4.34.9",
        "tinyglobby": "^0.2.13"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "jiti": ">=1.21.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/zod": {
      "version": "3.24.4",
      "resolved": "https://registry.npmjs.org/zod/-/zod-3.24.4.tgz",
      "integrity": "sha512-OdqJE9UDRPwWsrHjLN2F8bPxvwJBK22EHLWtanu0LSYr5YqzsaaW3RMgmjwr8Rypg5k+meEJdSPXJZXE/yqOMg==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    },
    "node_modules/zod-to-json-schema": {
      "version": "3.24.5",
      "resolved": "https://registry.npmjs.org/zod-to-json-schema/-/zod-to-json-schema-3.24.5.tgz",
      "integrity": "sha512-/AuWwMP+YqiPbsJx5D6TfgRTc4kTLjsh5SOcd4bLsfUg2RcEXrFMJl1DGgdHy2aCfsIA/cr/1JM0xcB2GZji8g==",
      "dev": true,
      "license": "ISC",
      "peerDependencies": {
        "zod": "^3.24.1"
      }
    }
  }
}
</file>

<file path="frontend/README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="frontend/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [
    react(),
    tailwindcss(),
  ],
})
</file>

<file path=".gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="frontend/src/lib/supabase.js">
// import { createClient } from '@supabase/supabase-js'

// const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
// const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY
// export const supabase = createClient(supabaseUrl, supabaseKey)

import { createClient } from '@supabase/supabase-js';
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
</file>

<file path="frontend/src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}

.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}

.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="frontend/src/App.jsx">
import { useState } from 'react';
import reactLogo from './assets/react.svg';
import viteLogo from '/vite.svg';
import './App.css';

function App() {
  const [count, setCount] = useState(0);

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.jsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  );
}

export default App;
</file>

<file path="frontend/src/index.css">
@import 'tailwindcss';

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}

button:hover {
  border-color: #646cff;
}

button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }

  a:hover {
    color: #747bff;
  }

  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="frontend/src/main.jsx">
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App.jsx';

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>
);
</file>

<file path="frontend/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import prettier from 'eslint-config-prettier'
import prettierPlugin from 'eslint-plugin-prettier'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
      prettier: prettierPlugin,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      ...prettier.rules,
      'prettier/prettier': 'error',
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="frontend/package.json">
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint src --ext .js,.jsx",
    "format": "prettier --write src/**/*.{js,jsx,css}",
    "preview": "vite preview"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.49.4",
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.26.0",
    "@tailwindcss/vite": "^4.1.6",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.26.0",
    "eslint-config-prettier": "^10.1.5",
    "eslint-plugin-prettier": "^5.4.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.1.0",
    "postcss": "^8.5.3",
    "prettier": "^3.5.3",
    "tailwindcss": "^4.1.6",
    "vite": "^6.3.5"
  }
}
</file>

<file path="doc/initialReactTailwind.md">
Vite + React + Tailwind CSS v4.1 初始化指南
本文件指導如何初始化一個 Vite + React 專案，安裝 Tailwind CSS v4.1（使用 @tailwindcss/vite 插件），並啟動開發伺服器。適用於 Threads Clone 社交媒體平台 的前端初始化（階段 1，迭代 1.1）。
先決條件

Node.js：版本 16.x 或 18.x（建議使用 nvm 管理）。
npm：版本 8.x 或以上。
Git：用於版本控制。
終端機：macOS/Linux 的終端或 Windows 的 PowerShell/WSL。

步驟
1. 初始化 Vite 專案

創建專案目錄：
mkdir -p thread-clone/frontend
cd thread-clone/frontend


運行 Vite 初始化：
npm create vite@latest .


選擇框架：React
選擇變體：JavaScript
這將生成 Vite 專案結構：frontend/
├── src/
│   ├── App.jsx
│   ├── index.css
│   ├── main.jsx
│   └── assets/
├── public/
├── index.html
├── package.json
├── vite.config.js




安裝依賴：
npm install



2. 安裝 Tailwind CSS v4.1
Tailwind CSS v4.1 使用 @tailwindcss/vite 插件，無需 postcss 或 autoprefixer。

安裝 Tailwind CSS：
npm install -D tailwindcss @tailwindcss/vite


配置 Vite：

編輯 frontend/vite.config.js：import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [
    react(),
    tailwindcss(),
  ],
})




導入 Tailwind CSS：

編輯 frontend/src/index.css：@import "tailwindcss";




（可選）自訂配置：

若需自訂，創建 frontend/tailwind.config.js：/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,jsx}",
  ],
  theme: {
    extend: {
      colors: {
        custom: '#1a202c',
      },
    },
  },
  plugins: [],
}





3. 驗證 Tailwind CSS

測試樣式：

編輯 frontend/src/App.jsx：function App() {
  return (
    <div className="p-4 bg-blue-500 text-white">
      <h1 className="text-2xl font-bold">Hello, Tailwind CSS v4.1!</h1>
    </div>
  )
}




啟動開發伺服器：
npm run dev


訪問 http://localhost:5173，應顯示藍色背景和白字。



4. 提交更改

初始化 Git（若尚未）：
git init
echo "node_modules/\ndist/\n.env" > .gitignore


提交：
git add .
git commit -m "初始化 Vite + React 專案，安裝 Tailwind CSS v4.1"



常見問題

拼寫錯誤：確保使用 tailwindcss 而非 taliwindcss。
環境變數：若使用 Supabase，添加 frontend/.env：VITE_SUPABASE_URL=your-supabase-url
VITE_SUPABASE_ANON_KEY=your-supabase-anon-key


錯誤調試：
檢查 package.json 的 scripts 是否包含 "dev": "vite"。
若依賴缺失，運行 npm install。
查看日誌：~/.npm/_logs/。



下一步

配置 Supabase：安裝 @supabase/supabase-js 並創建 src/lib/supabase.js。
配置 ESLint 和 Prettier：確保程式碼一致性。
推進迭代 1.2：創建資料庫結構。
</file>

<file path="doc/spec.md">
# Threads Clone 規格文件

## 1. 專案概述
本專案旨在開發一個類似 Threads 的社交媒體平台，使用者可發佈貼文、回覆、點讚、追蹤其他使用者，並支援搜尋功能。平台採用簡潔的卡片式介面，支援深色/淺色模式，後端使用 Spring Boot，前端使用 React，資料庫使用 Supabase（PostgreSQL）。開發採用測試驅動開發（TDD），確保高品質程式碼。

### 目標
- 提供動態時間軸（無限滾動），顯示使用者及其追蹤者的貼文。
- 支援匿名發文（需登入，隱藏真實身份）。
- 實現全文搜尋（貼文和回覆，按相關性排序）。
- 確保安全性和簡潔的使用者體驗。

### 非功能需求
- **後端**：Spring Boot，RESTful API，OpenAPI（Swagger）文件。
- **前端**：React，Tailwind CSS，支援深色/淺色模式和行動裝置適配。
- **資料庫**：Supabase 免費版（500 MB，PostgreSQL），使用 RLS（Row-Level Security）。
- **測試**：TDD，80% 單元測試覆蓋，50% 整合測試覆蓋。
- **安全性**：HTTPS、Supabase Auth（內建 bcrypt 和 JWT）、輸入驗證、速率限制。

---

## 2. 功能需求

### 2.1 使用者認證
- **認證方式**：
  - 使用 Supabase Auth 處理註冊、登入和 JWT 生成。
  - JWT 由 Supabase 生成，包含 `sub`（`auth.uid()`）和 `role`（如 `authenticated`），有效期 24 小時。
  - 前端使用 `@supabase/supabase-js` 進行認證，後端透過 Supabase 客戶端（`supabase-java`）或 REST API 傳遞 JWT。
- **註冊**：
  - 輸入：電子郵件（唯一）、使用者名稱（唯一，3-50 字元，字母/數字/下底線）、密碼（≥ 6 字元，無強度要求）。
  - 流程：
    - Supabase Auth 創建 `auth.users` 記錄，發送驗證郵件（內建功能，含一次性連結，有效期 24 小時）。
    - 後端同步創建 `users` 表記錄，儲存 `id`（與 `auth.users.id` 一致）、`email`、`username` 等。
  - 未驗證使用者可登入，但無法發文或回覆。
- **登入**：
  - 輸入：電子郵件、密碼。
  - 回應：Supabase JWT（包含 `access_token` 和 `refresh_token`）。
- **未登入使用者**：
  - 可查看時間軸、個人檔案、搜尋結果（透過 `anon` 角色）。
  - 無法發文、回覆、點讚或追蹤。
- **登出**：
  - 手動登出：前端清除 JWT（`localStorage`），重定向至首頁。
  - 無自動登出（無閒置超時）。

### 2.2 貼文管理
- **創建貼文**：
  - 內容：Markdown 格式，≤ 500 字。
  - 圖片：外部 URL（`.jpg`、`.png`、`.gif`，≤ 255 字元）。
  - 匿名選項：勾選「匿名」，顯示為「Anonymous」，管理員可查看真實 `user_id`。
  - 需登入且電子郵件驗證（透過 `users.is_verified` 檢查）。
- **刪除貼文**：
  - 軟刪除（`is_deleted = TRUE`）。
  - 權限：貼文擁有者或管理員。
- **點讚**：
  - 每人每篇貼文限點一次，記錄點讚使用者。
  - 顯示點讚數，不突出已點讚狀態。
- **時間軸**：
  - 無限滾動，顯示自己和追蹤者的貼文（`created_at` 倒序）。
  - 每次加載 20 條，支援游標分頁（`next_cursor`）。

### 2.3 回覆管理
- **創建回覆**：
  - 內容：Markdown 格式，≤ 200 字，單層（無巢狀）。
  - 圖片：外部 URL（同貼文）。
  - 匿名選項：顯示為「Anonymous」。
  - 需登入且電子郵件驗證。
- **刪除回覆**：
  - 軟刪除。
  - 權限：回覆者或管理員。
- **排序**：
  - 選項：時間順序（`created_at` 升序）、倒序（預設）。
  - 前端下拉選單切換。

### 2.4 追蹤系統
- **追蹤/取消追蹤**：
  - 點擊按鈕（「追蹤」/「取消追蹤」）。
  - 限制：無法追蹤自己（透過 RLS 檢查）。
- **個人檔案**：
  - 顯示：使用者名稱、簡介（≤ 160 字）、貼文數、追蹤者數、追蹤中數。
  - 貼文列表：無限滾動，`created_at` 倒序。
  - 互動：追蹤/取消追蹤按鈕。

### 2.5 搜尋功能
- **範圍**：貼文和回覆（`is_deleted = FALSE`）。
- **排序**：相關性（`ts_rank`），次按 `created_at` 倒序。
- **前端**：搜尋欄提交查詢，顯示結果列表（類型、摘要、連結）。
- **未來**：即時搜尋（輸入時動態顯示）。

### 2.6 管理員功能
- **刪除**：可刪除任何貼文或回覆（軟刪除）。
- **匿名資訊**：查看匿名貼文的真實 `user_id` 和 `username`。
- API：`GET /api/admin/posts?anonymous=true`。

---

## 3. 架構選擇

### 3.1 技術棧
- **後端**：
  - Spring Boot（`spring-boot-starter-web`、`spring-boot-starter-data-jpa`、`spring-boot-starter-security`）。
  - Supabase（PostgreSQL，免費版 500 MB）。
  - Supabase Java 客戶端（`supabase-java`）或 PostgREST API。
  - OpenAPI（`springdoc-openapi`）。
- **前端**：
  - React（Vite，`react-router-dom`、`react-markdown`、`dompurify`）。
  - Tailwind CSS（深色模式、響應式）。
  - Supabase JavaScript 客戶端（`@supabase/supabase-js`）。
- **資料庫**：Supabase，支援 RLS 和全文搜尋（`tsvector`）。
- **測試**：JUnit 5、Mockito、Spring Boot Test。

### 3.2 系統架構
```mermaid
graph TD
    A[前端: React] -->|REST API| B[後端: Spring Boot]
    A -->|Supabase JS Client| C[資料庫: Supabase]
    B -->|Supabase Java Client / PostgREST| C
    A -->|HTTPS| D[Cloudflare 未來整合]
    C -->|RLS| E[資料安全]
```

- **前端**：單頁應用（SPA），透過 Supabase JS 客戶端進行認證，與後端 API 互動。
- **後端**：RESTful API，處理業務邏輯，透過 Supabase Java 客戶端或 PostgREST API 連線 Supabase。
- **資料庫**：Supabase 托管 PostgreSQL，RLS 確保權限控制。
- **未來**：Cloudflare 提供 DDoS 保護和 Turnstile 驗證。

---

## 4. 資料處理細節

### 4.1 資料庫結構
```sql
CREATE TABLE users (
  id UUID PRIMARY KEY, -- 與 auth.users.id 同步
  email TEXT UNIQUE NOT NULL,
  username TEXT UNIQUE NOT NULL CHECK (LENGTH(username) >= 3 AND LENGTH(username) <= 50),
  bio TEXT CHECK (LENGTH(bio) <= 160),
  is_verified BOOLEAN DEFAULT FALSE,
  role TEXT DEFAULT 'user' CHECK (role IN ('user', 'admin')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE posts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  content TEXT NOT NULL CHECK (LENGTH(content) <= 500),
  content_tsv TSVECTOR, -- 由觸發器管理
  image_url TEXT CHECK (LENGTH(image_url) <= 255 AND image_url ~* '\.(jpg|png|gif)$'),
  user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  is_anonymous BOOLEAN DEFAULT FALSE,
  is_deleted BOOLEAN DEFAULT FALSE,
  likes_count INT DEFAULT 0 CHECK (likes_count >= 0),
  replies_count INT DEFAULT 0 CHECK (replies_count >= 0),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE replies (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
  content TEXT NOT NULL CHECK (LENGTH(content) <= 200),
  content_tsv TSVECTOR, -- 由觸發器管理
  image_url TEXT CHECK (LENGTH(image_url) <= 255 AND image_url ~* '\.(jpg|png|gif)$'),
  user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  is_anonymous BOOLEAN DEFAULT FALSE,
  is_deleted BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE likes (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  PRIMARY KEY (user_id, post_id)
);

CREATE TABLE follows (
  follower_id UUID REFERENCES users(id) ON DELETE CASCADE,
  followed_id UUID REFERENCES users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  PRIMARY KEY (follower_id, followed_id)
);
```

- **說明**：
  - `users.id` 與 Supabase 的 `auth.users.id` 同步，確保認證一致。
  - `content_tsv` 由觸發器生成，用於全文搜尋。
  - 移除 `verification_tokens` 表，改用 Supabase Auth 的內建驗證。

### 4.2 索引
```sql
CREATE INDEX idx_posts_content_tsv ON posts USING GIN(content_tsv) WHERE content_tsv IS NOT NULL;
CREATE INDEX idx_replies_content_tsv ON replies USING GIN(content_tsv) WHERE content_tsv IS NOT NULL;
CREATE INDEX idx_posts_user_id ON posts(user_id);
CREATE INDEX idx_posts_is_deleted ON posts(is_deleted);
CREATE INDEX idx_replies_post_id ON replies(post_id, created_at);
CREATE INDEX idx_replies_is_deleted ON replies(is_deleted);
CREATE INDEX idx_likes_post_id ON likes(post_id);
CREATE INDEX idx_follows_follower_id ON follows(follower_id);
CREATE INDEX idx_follows_followed_id ON follows(followed_id);
```

### 4.3 RLS（Supabase）
- **角色說明**：
  - `anon`：未登入使用者，公開訪問（例如時間軸）。
  - `authenticated`：登入使用者，透過 Supabase JWT 設置 `auth.uid()`。
  - `admin`：管理員角色，透過 `users.role` 檢查。
- **Users**：
  ```sql
  CREATE POLICY "Users view own profile" ON users FOR SELECT USING (id = auth.uid());
  CREATE POLICY "Users update own profile" ON users FOR UPDATE USING (id = auth.uid()) WITH CHECK (
    LENGTH(username) >= 3 AND LENGTH(username) <= 50 AND
    LENGTH(bio) <= 160
  );
  CREATE POLICY "Admins view all users" ON users FOR SELECT USING ((SELECT role FROM users WHERE id = auth.uid()) = 'admin');
  ```
- **Posts**：
  ```sql
  CREATE POLICY "Public view non-deleted posts" ON posts FOR SELECT USING (is_deleted = FALSE);
  CREATE POLICY "Users create posts" ON posts FOR INSERT WITH CHECK (
    auth.uid() IS NOT NULL AND
    (SELECT is_verified FROM users WHERE id = auth.uid()) = TRUE
  );
  CREATE POLICY "Users delete own posts" ON posts FOR UPDATE USING (user_id = auth.uid());
  CREATE POLICY "Admins delete all posts" ON posts FOR UPDATE USING ((SELECT role FROM users WHERE id = auth.uid()) = 'admin');
  CREATE POLICY "Admins view anonymous user info" ON posts FOR SELECT USING ((SELECT role FROM users WHERE id = auth.uid()) = 'admin');
  ```
- **Replies**：
  ```sql
  CREATE POLICY "Public view non-deleted replies" ON replies FOR SELECT USING (is_deleted = FALSE);
  CREATE POLICY "Users create replies" ON replies FOR INSERT WITH CHECK (
    auth.uid() IS NOT NULL AND
    (SELECT is_verified FROM users WHERE id = auth.uid()) = TRUE
  );
  CREATE POLICY "Users delete own replies" ON replies FOR UPDATE USING (user_id = auth.uid());
  CREATE POLICY "Admins delete all replies" ON replies FOR UPDATE USING ((SELECT role FROM users WHERE id = auth.uid()) = 'admin');
  ```
- **Likes**：
  ```sql
  CREATE POLICY "Users manage own likes" ON likes FOR ALL USING (user_id = auth.uid());
  ```
- **Follows**：
  ```sql
  CREATE POLICY "Users manage own follows" ON follows FOR ALL USING (follower_id = auth.uid()) WITH CHECK (follower_id != followed_id);
  ```

### 4.4 API 端點（RESTful）
- **認證**：
  - `POST /api/register`：
    - 輸入：`{ email, username, password }`
    - 使用 Supabase Auth 註冊，同步 `users` 表。
    - 回應：`{ message: "註冊成功，請驗證郵件" }`
  - `POST /api/login`：
    - 輸入：`{ email, password }`
    - 使用 Supabase Auth 登入。
    - 回應：`{ access_token, refresh_token }`
- **貼文**：
  - `POST /api/posts`：創建貼文（需 JWT）。
  - `GET /api/timeline`：時間軸（公開，無限滾動）。
  - `DELETE /api/posts/:post_id`：刪除貼文（擁有者或管理員）。
  - `POST /api/posts/:post_id/like`：點讚（需 JWT）。
  - `DELETE /api/posts/:post_id/like`：取消點讚。
- **回覆**：
  - `POST /api/posts/:post_id/replies`：創建回覆（需 JWT）。
  - `GET /api/posts/:post_id/replies?sort=desc`：獲取回覆（公開）。
  - `DELETE /api/replies/:reply_id`：刪除回覆（擁有者或管理員）。
- **追蹤**：
  - `POST /api/follow/:user_id`：追蹤（需 JWT）。
  - `DELETE /api/follow/:user_id`：取消追蹤。
  - `GET /api/users/:user_id`：個人檔案（公開）。
  - `GET /api/users/:user_id/posts`：使用者貼文（公開）。
- **搜尋**：
  - `GET /api/search?q=關鍵字`：全文搜尋（公開）。
- **管理員**：
  - `GET /api/admin/posts?anonymous=true`：查看匿名貼文（需管理員權限）。
- **OpenAPI 文件**：
  - 透過 `springdoc-openapi` 生成，訪問：`/swagger-ui.html`。

---

## 5. 錯誤處理策略
- **原則**：
  - 前端顯示簡潔、用戶友好的錯誤訊息，隱藏技術細節。
  - 後端返回標準化錯誤格式：
    ```json
    {
      "error": "錯誤描述",
      "code": "ERROR_CODE"
    }
    ```
- **常見錯誤**：
  - 無效圖片 URL：`400`，「請輸入有效的圖片 URL」。
  - 貼文內容過長：`400`，「貼文內容太長，請縮短至 500 字」。
  - 未驗證使用者發文：`403`，「請檢查郵件並完成驗證」。
  - 無效 JWT：`401`，「登入已過期，請重新登入」。
  - 伺服器錯誤：`500`，「系統忙碌，請稍後再試」。
- **前端實現**：
  ```jsx
  function PostForm() {
    const [error, setError] = useState('');
    const handleSubmit = async () => {
      try {
        const { error } = await supabase.from('posts').insert({ content });
        if (error) throw error;
      } catch (err) {
        setError(err.message);
      }
    };
    return (
      <div>
        {error && <div className="text-red-500">{error}</div>}
        <textarea />
        <button onClick={handleSubmit}>發布</button>
      </div>
    );
  }
  ```
- **後端實現**：
  ```java
  @RestControllerAdvice
  public class GlobalExceptionHandler {
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ErrorResponse> handleBadRequest(Exception ex) {
      return ResponseEntity.badRequest().body(new ErrorResponse(ex.getMessage(), "INVALID_INPUT"));
    }
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleServerError(Exception ex) {
      return ResponseEntity.status(500).body(new ErrorResponse("伺服器錯誤，請稍後再試", "INTERNAL_ERROR"));
    }
  }
  ```

---

## 6. 測試計劃
- **策略**：TDD，確保程式碼品質。
- **工具**：
  - JUnit 5（單元測試）。
  - Mockito（模擬依賴）。
  - Spring Boot Test（整合測試）。
  - Supabase CLI（資料庫測試）。
- **測試類型**：
  - **單元測試**（80% 覆蓋）：
    - 控制器（API 端點邏輯）。
    - 服務層（業務邏輯，如貼文創建、點讚計數）。
    - 示例：
      ```java
      @SpringBootTest
      class PostServiceTest {
        @MockBean
        private SupabaseClient supabaseClient;
        @Autowired
        private PostService postService;

        @Test
        void shouldCreatePostSuccessfully() {
          PostDTO postDTO = new PostDTO("內容", false);
          User user = new User("user_id", "email", true);
          when(supabaseClient.from("posts").insert(any())).thenReturn(mockResponse());

          Post createdPost = postService.createPost(postDTO, user);

          assertEquals(postDTO.getContent(), createdPost.getContent());
          verify(supabaseClient).from("posts").insert(any());
        }
      }
      ```
  - **整合測試**（50% 覆蓋）：
    - API 端點（`/api/register`、`/api/posts`、`/api/search`）。
    - Supabase Auth 和資料庫互動（測試 RLS）。
    - 示例：
      ```java
      @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
      class AuthControllerIntegrationTest {
        @Autowired
        private TestRestTemplate restTemplate;
        @Autowired
        private SupabaseClient supabaseClient;

        @Test
        void shouldLoginSuccessfully() {
          String email = "test@example.com";
          String password = "password123";
          supabaseClient.auth().signUp(email, password); // 模擬註冊
          ResponseEntity<AuthResponse> response = restTemplate.postForEntity(
            "/api/login",
            new LoginRequest(email, password),
            AuthResponse.class
          );
          assertEquals(HttpStatus.OK, response.getStatusCode());
          assertNotNull(response.getBody().getAccessToken());
        }
      }
      ```
  - **資料庫測試**：
    - 使用 Supabase CLI 驗證 RLS：
      ```sql
      -- 模擬未登入
      SET ROLE anon;
      SELECT * FROM posts; -- 預期：僅返回 is_deleted = FALSE
      -- 模擬登入使用者
      PERFORM set_config('jwt.claims', '{"sub": "<user_id>", "role": "authenticated"}', true);
      INSERT INTO posts (content, user_id) VALUES ('Test', auth.uid()); -- 預期：成功
      ```
- **優先測試功能**：
  - 認證（註冊、登入、驗證）。
  - 貼文（創建、刪除、匿名）。
  - 回覆（創建、排序）。
  - 點讚（單次點讚、計數）。
  - 搜尋（相關性、性能）。
  - 管理員（權限、匿名資訊）。
- **測試結構**：
  ```
  src/test/java
  ├── controller/
  ├── service/
  ├── repository/
  └── integration/
  ```

---

## 7. 開發順序
- **階段 1：資料庫設計**（1-2 週）：
  - 創建表、索引、RLS。
  - 配置 Supabase Auth（啟用郵件驗證）。
  - 測試：Supabase CLI 驗證結構和 RLS。
- **階段 2：後端核心**（3-4 週）：
  - 實現認證（使用 Supabase Auth 的註冊、登入）。
  - 實現貼文、回覆、點讚 API。
  - TDD：單元測試（控制器、服務）、整合測試（API、Supabase）。
  - 生成 OpenAPI 文件。
- **階段 3：前端基礎**（2-3 週）：
  - 登入/註冊表單（使用 `@supabase/supabase-js`）。
  - 時間軸、貼文/回覆表單。
  - 深色模式、行動適配。
- **階段 4：進Xiv功能**（2-3 週）：
  - 搜尋、追蹤、個人檔案、管理員功能。
- **階段 5：整合與優化**（1-2 週）：
  - 整合前端後端。
  - 性能優化（索引、快取）。
  - 最終測試。

---

## 8. 交付方式
- **GitHub 儲存庫**：
  - 結構：
```
threads-clone/
├── backend/                                    # Spring Boot 後端專案
│   ├── src/
│   │   ├── main/
│   │   │   ├── java/com/threadsclone/backend/
│   │   │   │   ├── controller/              # 控制器
│   │   │   │   │   ├── AdminController.java
│   │   │   │   │   ├── FollowController.java
│   │   │   │   │   ├── NotificationController.java
│   │   │   │   │   ├── PostController.java
│   │   │   │   │   └── UserController.java
│   │   │   │   ├── dto/                    # 資料傳輸對象
│   │   │   │   │   ├── NotificationResponse.java
│   │   │   │   │   ├── PostRequest.java
│   │   │   │   │   ├── PostResponse.java
│   │   │   │   │   ├── UserRequest.java
│   │   │   │   │   └── UserResponse.java
│   │   │   │   ├── entity/                 # 實體類
│   │   │   │   │   ├── Follow.java
│   │   │   │   │   ├── Notification.java
│   │   │   │   │   └── Post.java
│   │   │   │   ├── service/                # 服務邏輯
│   │   │   │   │   ├── AdminService.java
│   │   │   │   │   ├── FollowService.java
│   │   │   │   │   ├── NotificationService.java
│   │   │   │   │   ├── PostService.java
│   │   │   │   │   └── UserService.java
│   │   │   ├── resources/
│   │   │   │   └── application.properties  # Supabase 配置
│   │   ├── test/
│   │   │   ├── java/com/threadsclone/backend/controller/
│   │   │   │   ├── AdminControllerTest.java
│   │   │   │   ├── AdminIntegrationTest.java
│   │   │   │   ├── FollowControllerTest.java
│   │   │   │   ├── FollowIntegrationTest.java
│   │   │   │   ├── NotificationControllerTest.java
│   │   │   │   ├── NotificationIntegrationTest.java
│   │   │   │   ├── PostControllerTest.java
│   │   │   │   ├── PostIntegrationTest.java
│   │   │   │   ├── UserControllerTest.java
│   │   │   │   └── UserIntegrationTest.java
│   ├── pom.xml                             # Maven 依賴
│   └── database/
│       ├── database-schema.sql             # 資料庫結構（users, posts, replies, likes, follows）
│       └── notifications.sql              # 通知表和觸發器
├── frontend/                                  # React 前端專案
│   ├── src/
│   │   ├── components/
│   │   │   ├── Timeline.jsx               # 時間軸組件
│   │   │   └── Timeline.test.jsx          # 時間軸測試
│   │   ├── lib/
│   │   │   └── supabase.js                # Supabase 客戶端配置
│   │   ├── pages/
│   │   │   ├── AdminPanel.jsx             # 管理員面板
│   │   │   ├── AdminPanel.test.jsx
│   │   │   ├── Notifications.jsx          # 通知頁面
│   │   │   ├── Notifications.test.jsx
│   │   │   ├── Profile.jsx                # 個人資料頁面
│   │   │   ├── Profile.test.jsx
│   │   │   ├── Search.jsx                 # 搜索頁面
│   │   │   └── Search.test.jsx
│   │   ├── App.jsx                        # 路由配置
│   │   ├── index.jsx                      # 入口文件
│   │   └── index.css                      # 全局樣式（Tailwind CSS）
│   ├── public/
│   │   ├── index.html                     # HTML 模板
│   │   └── favicon.ico                    # 圖標
│   ├── package.json                       # Node.js 依賴
│   ├── tailwind.config.js                 # Tailwind CSS 配置
│   └── vite.config.js                     # Vite 配置
├── README.md                              # 專案說明
└── .gitignore                             # Git 忽略文件
```

  - 包含 CI/CD（GitHub Actions）。
- **規格文件**（`docs/specification.md`）：
  - 功能、資料庫、API、測試、未來功能。
  - 附錄：Mermaid 結構圖、環境變數。
- **額外資源**：
  - OpenAPI 文件（`/swagger-ui.html`）。
  - 資料庫腳本（`database-schema.sql`）。
  - Postman 集合。
- **環境變數**：
  ```env
  SUPABASE_URL=https://<project>.supabase.co
  SUPABASE_KEY=<key>
  ```

---

## 9. 未來功能
- 即時搜尋。
- 圖片上傳（Supabase Storage，100 KB）。
- Cloudflare Turnstile（隱形驗證）。
- 資料清理（過期貼文）。
- 第三方登入（Google，透過 Supabase Auth）。
- Markdown 即時預覽。
- 多語言（英文、簡體中文）。

---

## 10. 開發者支援
- **無經驗工程師指南**：
  - 詳細 `README.md`（安裝、執行、測試）。
  - 程式碼範例（Spring Boot 控制器、React 組件）。
  - 學習資源：
    - Spring Boot 官方教程。
    - React 官方文件。
    - Supabase 快速入門（Auth、RLS、PostgREST）。
- **TDD 入門**：
  - JUnit 5 和 Mockito 範例。
  - 每個功能附上測試案例。
- **Supabase 配置**：
  - 提供 `database-schema.sql` 和 RLS 腳本。
  - 說明連線方式（Supabase 客戶端或 PostgREST API）。

---

## 附錄

### 資料庫結構圖
```mermaid
erDiagram
  users ||--o{ posts : creates
  users ||--o{ replies : creates
  users ||--o{ likes : creates
  users ||--o{ follows : follows
  posts ||--o{ replies : contains
  posts ||--o{ likes : receives
```

### 環境變數範例
```env
SUPABASE_URL=https://<project>.supabase.co
SUPABASE_KEY=<key>
```

### 安裝與執行
1. **後端**：
   ```bash
   cd backend
   mvn install
   mvn spring-boot:run
   ```
2. **前端**：
   ```bash
   cd frontend
   npm install
   npm run dev
   ```
3. **Supabase**：
  - 初始化專案，匯入 `database-schema.sql`。
  - 配置 RLS 和環境變數。
  - 啟用 Supabase Auth 的郵件驗證（儀表板設置）。
</file>

<file path="doc/todo.md">
# Threads Clone 專案待辦事項

這份待辦清單涵蓋 Threads Clone 社交媒體平台的所有開發階段，從基礎設置到管理員功能。每个任務包含具體工作項目，使用 `[ ]` 標記進度。

## 階段 1：專案設置與資料庫結構

目標：初始化前端和後端專案，設置 Supabase 資料庫並定義核心表結構。

### 迭代 1.1：專案初始化

- [x] 初始化前端 React 專案（使用 Vite）
  - 創建 `frontend/` 目錄，運行 `npm create vite@latest`。
  - 配置 Tailwind CSS（`tailwind.config.js`）。
  - 設置 ESLint 和 Prettier 確保程式碼一致性。
- [ ] 初始化後端 Spring Boot 專案
  - 創建 `backend/` 目錄，生成 Maven 專案（`pom.xml`）。
  - 添加 Supabase Java 依賴（`io.github.jan:supabase-java`）。
  - 配置 `application.properties`（Supabase URL 和 Key）。
- [ ] 設置 Git 儲存庫
  - 創建 `.gitignore`，忽略 `node_modules` 和構建產物。
  - 初始化 Git，提交初始專案結構。

### 迭代 1.2：資料庫結構

- [x] 設計並創建核心資料庫表
  - 創建 `database/database-schema.sql`：
    - `users` 表：儲存用戶資料（`id`, `email`, `username`, `bio`, `role` 等）。
    - `posts` 表：儲存貼文（`id`, `content`, `image_url`, `user_id`, `is_anonymous` 等）。
    - `replies` 表：儲存回覆（`id`, `content`, `post_id`, `user_id`, `is_anonymous` 等）。
    - `likes` 表：儲存點讚（`post_id`, `user_id`）。
    - `follows` 表：儲存追蹤關係（`follower_id`, `followed_id`）。
  - 啟用 RLS（Row Level Security）並定義政策：
    - `Users view own profile`
    - `Users update own profile`
    - `Users view public posts`
    - `Users manage own posts`
    - `Users manage own replies`
    - `Users manage own likes`
    - `Users manage own follows`
- [x] 設置觸發器
  - 創建 `handle_new_user` 函數，自動為新用戶設置預設 `username` 和 `role`。
- [x] 測試資料庫結構
  - 使用 Supabase 儀表板或 CLI 應用 `database-schema.sql`。
  - 插入測試資料，驗證 RLS 政策。

## 階段 2：用戶認證與貼文

目標：實現用戶認證（登錄/註冊）並支援貼文創建和時間軸顯示。

### 迭代 2.1：用戶認證

- [ ] 配置 Supabase 認證
  - 創建 `frontend/src/lib/supabase.js`，初始化 Supabase 客戶端。
  - 配置環境變數（`.env`）儲存 `SUPABASE_URL` 和 `SUPABASE_ANON_KEY`。
- [ ] 實現登錄和註冊頁面
  - 創建 `frontend/src/pages/Login.jsx` 和 `Login.test.jsx`：
    - 支援電子郵件和密碼登錄。
    - 處理錯誤（例如無效憑證）。
  - 創建 `frontend/src/pages/Signup.jsx` 和 `Signup.test.jsx`：
    - 支援電子郵件、密碼和用戶名註冊。
    - 調用 `handle_new_user` 觸發器。
- [ ] 測試認證流程
  - 單元測試：模擬 Supabase 登錄/註冊 API，驗證錯誤處理。
  - 手動測試：確保登錄後重定向到時間軸，註冊後自動登錄。

### 迭代 2.2：貼文 API

- [ ] 實現貼文創建和刪除 API
  - 創建 `backend/src/main/java/com/threadsclone/backend/controller/PostController.java`：
    - `POST /api/posts`：創建貼文。
    - `DELETE /api/posts/:post_id`：軟刪除貼文（設置 `is_deleted = true`）。
  - 創建 `backend/src/main/java/com/threadsclone/backend/service/PostService.java`：
    - 處理貼文邏輯，與 Supabase Postgrest 交互。
  - 創建 `backend/src/main/java/com/threadsclone/backend/dto/PostRequest.java` 和 `PostResponse.java`。
- [ ] 實現時間軸 API
  - 在 `PostController.java` 中添加 `GET /api/timeline`：
    - 返回追蹤用戶的貼文（分頁）。
  - 更新 `PostService.java` 支援分頁查詢。
- [ ] 測試貼文 API
  - 創建 `backend/src/test/java/com/threadsclone/backend/controller/PostControllerTest.java`：
    - 單元測試：驗證創建、刪除和時間軸 API。
  - 創建 `backend/src/test/java/com/threadsclone/backend/controller/PostIntegrationTest.java`：
    - 整合測試：驗證資料庫操作和 RLS。

### 迭代 2.3：前端貼文與時間軸

- [ ] 實現時間軸頁面
  - 創建 `frontend/src/components/Timeline.jsx` 和 `Timeline.test.jsx`：
    - 顯示貼文列表（`GET /api/timeline`）。
    - 支援無限滾動（使用 IntersectionObserver）。
  - 創建貼文表單，調用 `POST /api/posts`。
- [ ] 測試時間軸
  - 單元測試：模擬 API 呼叫，驗證貼文渲染和分頁。
  - 手動測試：確保貼文卡片樣式（Tailwind CSS）一致，滾動加載順暢。

## 階段 3：回覆與點讚

目標：實現貼文回覆和點讚功能，增強用戶交互。

### 迭代 3.1：回覆 API

- [ ] 實現回覆 API
  - 更新 `PostController.java`：
    - `POST /api/posts/:post_id/replies`：創建回覆。
  - 更新 `PostService.java`：
    - 插入回覆到 `replies` 表，更新 `posts.replies_count`。
- [ ] 測試回覆 API
  - 更新 `PostControllerTest.java` 和 `PostIntegrationTest.java`：
    - 驗證回覆創建和計數更新。
    - 檢查 RLS（僅用戶可創建回覆）。

### 迭代 3.2：點讚 API

- [ ] 實現點讚 API
  - 更新 `PostController.java`：
    - `POST /api/posts/:post_id/like`：添加點讚。
    - `DELETE /api/posts/:post_id/like`：取消點讚。
  - 更新 `PostService.java`：
    - 管理 `likes` 表，更新 `posts.likes_count`。
- [ ] 測試點讚 API
  - 更新 `PostControllerTest.java` 和 `PostIntegrationTest.java`：
    - 驗證點讚和取消點讚。
    - 檢查 RLS（僅用戶可管理自己的點讚）。

### 迭代 3.3：前端回覆與點讚

- [ ] 更新時間軸組件
  - 更新 `frontend/src/components/Timeline.jsx`：
    - 添加回覆表單（`POST /api/posts/:post_id/replies`）。
    - 添加點讚按鈕（`POST/DELETE /api/posts/:post_id/like`）。
    - 顯示回覆列表和點讚數。
  - 更新 `frontend/src/components/Timeline.test.jsx`：
    - 單元測試：驗證回覆提交和點讚交互。
- [ ] 測試前端交互
  - 手動測試：驗證回覆列表渲染、點讚數更新和 Tailwind CSS 樣式。

## 階段 4：用戶追蹤與個人資料

目標：實現用戶追蹤功能和個人資料頁面。

### 迭代 4.1：追蹤 API

- [ ] 實現追蹤 API
  - 創建 `backend/src/main/java/com/threadsclone/backend/controller/FollowController.java`：
    - `POST /api/users/:user_id/follow`：追蹤用戶。
    - `DELETE /api/users/:user_id/follow`：取消追蹤。
  - 創建 `backend/src/main/java/com/threadsclone/backend/service/FollowService.java`。
  - 創建 `backend/src/main/java/com/threadsclone/backend/entity/Follow.java`。
- [ ] 測試追蹤 API
  - 創建 `backend/src/test/java/com/threadsclone/backend/controller/FollowControllerTest.java`：
    - 單元測試：驗證追蹤和取消追蹤。
  - 創建 `backend/src/test/java/com/threadsclone/backend/controller/FollowIntegrationTest.java`：
    - 整合測試：驗證 `follows` 表記錄。

### 迭代 4.2：個人資料 API

- [ ] 實現個人資料 API
  - 創建 `backend/src/main/java/com/threadsclone/backend/controller/UserController.java`：
    - `GET /api/users/:user_id`：查看用戶資料。
    - `PUT /api/users/me`：更新用戶資料（`username`, `bio`）。
  - 創建 `backend/src/main/java/com/threadsclone/backend/service/UserService.java`。
  - 創建 `backend/src/main/java/com/threadsclone/backend/dto/UserRequest.java` 和 `UserResponse.java`。
- [ ] 測試個人資料 API
  - 創建 `backend/src/test/java/com/threadsclone/backend/controller/UserControllerTest.java`：
    - 單元測試：驗證資料檢索和更新。
  - 創建 `backend/src/test/java/com/threadsclone/backend/controller/UserIntegrationTest.java`：
    - 整合測試：驗證 RLS 和資料更新。

### 迭代 4.3：前端個人資料

- [ ] 實現個人資料頁面
  - 創建 `frontend/src/pages/Profile.jsx` 和 `Profile.test.jsx`：
    - 顯示用戶資料（`GET /api/users/:user_id`）。
    - 支援編輯資料（`PUT /api/users/me`）。
    - 支援追蹤/取消追蹤（`POST/DELETE /api/users/:user_id/follow`）。
- [ ] 測試個人資料頁面
  - 單元測試：驗證資料渲染、編輯提交和追蹤交互。
  - 手動測試：驗證頁面樣式（Tailwind CSS）和交互。

## 階段 5：搜索與通知

目標：實現貼文搜索和通知系統。

### 迭代 5.1：搜索 API

- [ ] 實現貼文搜索 API
  - 更新 `PostController.java`：
    - `GET /api/search`：全文搜索貼文（使用 `posts.content_tsv`）。
  - 更新 `PostService.java`：
    - 支援分頁和關鍵字查詢。
- [ ] 測試搜索 API
  - 更新 `PostControllerTest.java` 和 `PostIntegrationTest.java`：
    - 驗證搜索結果和分頁。

### 迭代 5.2：前端搜索

- [ ] 實現搜索頁面
  - 創建 `frontend/src/pages/Search.jsx` 和 `Search.test.jsx`：
    - 支援關鍵字輸入，顯示搜索結果（`GET /api/search`）。
    - 支援分頁。
- [ ] 測試搜索頁面
  - 單元測試：驗證搜索結果渲染。
  - 手動測試：驗證搜索輸入和貼文卡片樣式。

### 迭代 5.3：通知系統

- [ ] 創建通知表和觸發器
  - 創建 `database/notifications.sql`：
    - `notifications` 表：儲存點讚和回覆通知。
    - 觸發器：`handle_new_like` 和 `handle_new_reply`。
    - RLS 政策：`Users view own notifications`。
- [ ] 實現通知 API
  - 創建 `backend/src/main/java/com/threadsclone/backend/controller/NotificationController.java`：
    - `GET /api/notifications`：返回用戶通知。
  - 創建 `backend/src/main/java/com/threadsclone/backend/service/NotificationService.java`。
  - 創建 `backend/src/main/java/com/threadsclone/backend/entity/Notification.java`。
- [ ] 測試通知 API
  - 創建 `backend/src/test/java/com/threadsclone/backend/controller/NotificationControllerTest.java`：
    - 單元測試：驗證通知查詢。
  - 創建 `backend/src/test/java/com/threadsclone/backend/controller/NotificationIntegrationTest.java`：
    - 整合測試：驗證通知生成和 RLS。

### 迭代 5.4：前端通知

- [ ] 實現通知頁面
  - 創建 `frontend/src/pages/Notifications.jsx` 和 `Notifications.test.jsx`：
    - 顯示通知列表（`GET /api/notifications`）。
    - 支援分頁。
- [ ] 測試通知頁面
  - 單元測試：驗證通知渲染。
  - 手動測試：驗證通知樣式和分頁。

## 階段 6：管理員功能

目標：實現管理員功能，支援查看和刪除所有貼文。

### 迭代 6.1：管理員 API

- [ ] 實現管理員 API
  - 創建 `backend/src/main/java/com/threadsclone/backend/controller/AdminController.java`：
    - `GET /api/admin/posts`：查看所有貼文（可篩選已刪除/匿名）。
    - `DELETE /api/admin/posts/:post_id`：刪除貼文。
  - 創建 `backend/src/main/java/com/threadsclone/backend/service/AdminService.java`。
- [ ] 測試管理員 API
  - 創建 `backend/src/test/java/com/threadsclone/backend/controller/AdminControllerTest.java`：
    - 單元測試：驗證僅管理員可訪問。
  - 創建 `backend/src/test/java/com/threadsclone/backend/controller/AdminIntegrationTest.java`：
    - 整合測試：驗證貼文檢索和刪除。

### 迭代 6.2：前端管理員面板

- [ ] 實現管理員面板
  - 創建 `frontend/src/pages/AdminPanel.jsx` 和 `AdminPanel.test.jsx`：
    - 顯示貼文列表（`GET /api/admin/posts`）。
    - 支援篩選已刪除/匿名貼文。
    - 支援刪除貼文（`DELETE /api/admin/posts/:post_id`）。
- [ ] 測試管理員面板
  - 單元測試：驗證角色檢查、貼文渲染和刪除操作。
  - 手動測試：驗證頁面樣式和篩選交互。

## 其他任務

- [ ] 配置路由
  - 更新 `frontend/src/App.jsx`：
    - 定義路由：`/login`, `/signup`, `/timeline`, `/profile/:user_id`, `/search`, `/notifications`, `/admin`。
- [ ] 部署專案
  - 前端：部署到 Vercel 或 Netlify。
  - 後端：部署到 Railway 或 Heroku。
  - 配置 Supabase 環境變數。
- [ ] 撰寫文件
  - 更新 `README.md`：
    - 包含專案概述、設置指南和 API 文件。
  - 提供 API 文件（例如使用 Swagger）。
- [ ] 執行完整測試
  - 運行所有單元測試和整合測試。
  - 手動測試所有功能（認證、貼文、回覆、點讚、追蹤、個人資料、搜索、通知、管理員）。

---

## 說明與使用指南

### 文件結構

- **階段與迭代**：每個階段按功能劃分（例如認證、貼文、管理員），迭代聚焦具體實現（例如 API、前端）。
- **工作項目**：詳細列出每個任務，涵蓋程式碼實現、測試和手動驗證。
- **進度追蹤**：使用 `[ ]`（未完成）或 `[x]`（已完成）標記進度，您可直接編輯 Markdown 文件。
- **檔案參考**：對應前述資料夾結構（例如 `frontend/src/components/Timeline.jsx`），確保與專案一致。

### 如何使用

1. **複製文件**：將上述內容保存為 `todo.markdown`，放置於專案根目錄（`threads-clone/`）。
2. **追蹤進度**：在開發過程中，完成任務後將 `[ ]` 改為 `[x]`，例如：
   ```markdown
   - [x] 初始化前端 React 專案（使用 Vite）
   ```
3. **優先級排序**：按階段順序執行，確保依賴關係（例如資料庫結構先於 API）。
4. **檢查點**：
   - 每個迭代完成後，運行相關測試（單元測試和整合測試）。
   - 階段完成後，進行手動測試，驗證 UI 和功能。

### 與專案整合

- **資料庫**：依賴 `database-schema.sql` 和 `notifications.sql`，確保 RLS 和觸發器正確設置。
- **前端**：所有頁面（`Timeline.jsx`, `Profile.jsx` 等）使用 Tailwind CSS，與 `tailwind.config.js` 一致。
- **後端**：API 實現（`PostController.java` 等）與 Supabase Postgrest 交互，依賴 `application.properties` 配置。
- **測試**：每個功能包含單元測試（例如 `Timeline.test.jsx`）和整合測試（例如 `PostIntegrationTest.java`）。

## 下一步建議

- **擴展功能**：
  - [ ] 添加私訊功能（新表 `messages`，API `POST /api/messages`）。
  - [ ] 實現貼文標籤（新表 `tags`，支援 `GET /api/tags/:tag`）。
- **效能優化**：
  - [ ] 在 `GET /api/timeline` 中引入快取（Redis）。
  - [ ] 優化前端無限滾動，減少 API 呼叫。
- **部署與監控**：
  - [ ] 配置 CI/CD（GitHub Actions），自動運行測試和部署。
  - [ ] 添加日誌（例如使用 Logback）監控後端錯誤。
</file>

<file path=".gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*

.env
</file>

</files>
